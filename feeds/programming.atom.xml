<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bhargav's Homepage - programming</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2015-10-02T13:16:00+05:30</updated><entry><title>C++ 14 : The new stuff</title><link href="/c-14-the-new-stuff.html" rel="alternate"></link><published>2015-10-02T13:16:00+05:30</published><updated>2015-10-02T13:16:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2015-10-02:/c-14-the-new-stuff.html</id><summary type="html">&lt;p&gt;TIL about the C++14 release and the new features in this release&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometime last year the C++14 standard was finalized. Although, this is specified to be a minor release to the standard, it does bring some very helpful features. As I understand, new versions of most compilers support these features in some form already and it is just a matter of using the right switch to have them behave as per the C++14 standard (rather than whatever implementation specific behaviour they implemented as an extension).&lt;/p&gt;
&lt;h3&gt;"New" New Stuff&lt;/h3&gt;
&lt;p&gt;There aren't too many "new" new features, the ones I found most helpful are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary Literals&lt;/strong&gt; : &lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt; can now be used to specify binary literals (similar to how hex numbers are specified). This is pretty helpful for specifying masks and such&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Digit Separator&lt;/strong&gt; : &lt;code&gt;'&lt;/code&gt; (single quote) can now be used between numbers to separate digits, eg: 100k can be written &lt;code&gt;100'000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STL Custom Literals&lt;/strong&gt; : STL has been extended to support string literals such as &lt;code&gt;s&lt;/code&gt; for seconds etc for various types&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Old New Stuff&lt;/h3&gt;
&lt;p&gt;With a nod to the &lt;a href="https://devblogs.microsoft.com/oldnewthing/"&gt;inspiration&lt;/a&gt; behind this title, here's the list of C++11 items that 14 improves upon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Return-type Deduction&lt;/strong&gt; : &lt;code&gt;auto&lt;/code&gt; is now permissible as a return type. Eg: &lt;code&gt;auto someFunc(int x, float y);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Lambdas&lt;/strong&gt; : &lt;code&gt;auto&lt;/code&gt; is now permissible in lambda parameter type. Eg: &lt;code&gt;[](auto x, auto y) {return x + y;};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Lambda Caputure&lt;/strong&gt; : In addition to capturing scoped variables by value, now, arbitrary values can also be passed into lambdas. Eg: &lt;code&gt;[a = x, b = x+1] {return 2*a+b;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2014/08/cpp14-here-features/"&gt;This&lt;/a&gt; and &lt;a href="https://isocpp.org/wiki/faq/cpp14-language"&gt;this&lt;/a&gt; page have been very helpful to bring me upto speed with C++14.&lt;/p&gt;
&lt;p&gt;Overall, C++14 seems to be an "hotfix" or "service pack" for C++11 rather than something major. It should be realtively simple to migrate existing C++11 code to 14 and start utilizing some of the new stuff from 14. While binary literals and generic lambdas look great on paper, I really am keen to see how much of an impact they really have on day-to-day tasks.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="cpp11"></category><category term="til"></category></entry><entry><title>The Pragmatic Programmer : Book Review</title><link href="/the-pragmatic-programmer-book-review.html" rel="alternate"></link><published>2013-12-21T14:48:00+05:30</published><updated>2013-12-21T14:48:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2013-12-21:/the-pragmatic-programmer-book-review.html</id><summary type="html">&lt;p&gt;My review of The Pragmatic Programmer&lt;/p&gt;</summary><content type="html">&lt;p&gt;While browsing around for books casually today, I found an almost-new copy of "The Pragmatic Programmer" today. Although I was looking for bargains on fiction and non-fiction titles and not necessarily programming and tech books, I found it too hard to pass on the deal. It was a 2013 reprint (lucky!) with ISBN: 978-81-317-2242-9. The paper quality was ok-ish and there weren't any markings left by the previous owner (very lucky!).&lt;/p&gt;
&lt;p&gt;As I got home and read the Foreword and the Preface, I was pleasently surprised. It wasn't a preachy "do-X-for-Efficiency" book that I expected it to be. Instead, it read easy and had a lot of sensible advice even before the main content of the book began! Being the easy read it was and the no-nonsense message it carried, I found the book very hard to put down and got through the material (minus the Appendix) in less than a week :)&lt;/p&gt;
&lt;p&gt;More than a "review", I intend for this note to be a personal refresher or reference card that I can get back to every so often. With that said, here are the most important maxims (IMHO) after the first read of this book (oh, I'm definitely going to read it a few times over and update this notes file as I peel more layers away):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Care About Your Craft&lt;/li&gt;
&lt;li&gt;Provide Options, not excuses&lt;/li&gt;
&lt;li&gt;Don't Live with Broken Windows&lt;/li&gt;
&lt;li&gt;Remember the Big Picture&lt;/li&gt;
&lt;li&gt;Invest Regularly in Your Knowledge Portfolio&lt;/li&gt;
&lt;li&gt;Analyze What You Read and Hear&lt;/li&gt;
&lt;li&gt;Make It Easy to Reuse&lt;/li&gt;
&lt;li&gt;There Are No Final Decisions&lt;/li&gt;
&lt;li&gt;Use Tracer Bullets to Find the Target&lt;/li&gt;
&lt;li&gt;Program Close to the Problem Domain&lt;/li&gt;
&lt;li&gt;Estimate &amp;amp; Iterate the Schedule with the Code&lt;/li&gt;
&lt;li&gt;Keep Knowledge in Plain Text&lt;/li&gt;
&lt;li&gt;Use the Power of Command Shells&lt;/li&gt;
&lt;li&gt;Use a Single Editor Well&lt;/li&gt;
&lt;li&gt;"select" Isn't Broken.&lt;/li&gt;
&lt;li&gt;Don't Assume, Prove It&lt;/li&gt;
&lt;li&gt;Write Code That Writes Code&lt;/li&gt;
&lt;li&gt;You Can't Write Perfect Software&lt;/li&gt;
&lt;li&gt;Put Abstractions in Code, Details in Metadata&lt;/li&gt;
&lt;li&gt;Refactor Early, Refactor Often&lt;/li&gt;
&lt;li&gt;Work with a user to think like a user&lt;/li&gt;
&lt;li&gt;Organize Teams Around Functionality&lt;/li&gt;
&lt;li&gt;Test Early. Test Often. Test Automatically&lt;/li&gt;
&lt;li&gt;Gently Exceed Your Users' Expectations&lt;/li&gt;
&lt;li&gt;Sign Your Work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book was amazing and I only wish I could have found it sooner in my career. All of the advice is generic, seemingly common sense, yet very practical and grounded. I would gladly recommend it it anyone looking at programming and software development as a hobby. This book is right up there with K&amp;amp;R C and the Design of the UNIX Operating System in terms of the impact that it has personally had on me.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>gDebugger</title><link href="/gdebugger.html" rel="alternate"></link><published>2013-02-16T19:52:00+05:30</published><updated>2013-02-16T19:52:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2013-02-16:/gdebugger.html</id><summary type="html">&lt;p&gt;TIL about gDebugger Tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;Debugging OpenGL/GLES calls is an pretty challenging and there is almost next to nothing for debugging shaders. Today, I came across &lt;a href="http://www.gremedy.com/"&gt;gDebugger&lt;/a&gt; developed by Graphics Remedy that allows programmers to do debug OpenGL/GLES applications in a more traditional way. It also has tools for profiling and measuring performance. Key Features of this tool are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Texture &amp;amp; Buffers viewer : allows you to look at loaded textures and contents of front/back/depth buffers etc&lt;/li&gt;
&lt;li&gt;Break on GL Error : stop code execution on encountering an OpenGL error&lt;/li&gt;
&lt;li&gt;Properties &amp;amp; State View : displays state variables and arguments/properties passed into various &lt;code&gt;gl&lt;/code&gt; Functions&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance Profiling Features, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call Statistics : shows percentage time and number of calls made to &lt;code&gt;gl&lt;/code&gt; Functions&lt;/li&gt;
&lt;li&gt;State Change Stats : shows number of irrelevant/redundant state changes made in the code&lt;/li&gt;
&lt;li&gt;Performance Graphs : shows frame rate &amp;amp; other relevant info like CPU/GPU utilization, mem utilization etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although not exactly as full-fledged and featureful as &lt;code&gt;gdb&lt;/code&gt; or Visual Studio, it is really a big leap forward and the profiling features are pretty helpful. :)&lt;/p&gt;</content><category term="programming"></category><category term="c"></category><category term="cpp"></category><category term="opengl"></category><category term="til"></category></entry><entry><title>More Effective C++ &amp; Effective STL : Book Reviews</title><link href="/more-effective-c-effective-stl-book-reviews.html" rel="alternate"></link><published>2012-12-22T10:13:00+05:30</published><updated>2012-12-22T10:13:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2012-12-22:/more-effective-c-effective-stl-book-reviews.html</id><summary type="html">&lt;p&gt;My review of the More Effective C++ &amp;amp; Effective STL Books&lt;/p&gt;</summary><content type="html">&lt;p&gt;With more of my day-to-day work moving to C++, I was looking for a nice book to help me get upto speed with C++, best practices and some of the gotchas that C++ is ~famous~ infamous for. This book in particular had rave reviews and was recommended by multiple people, with colleagues, former colleagues and internet strangers all saying very good things about it. I purchased by copy from Sapna Book House about 2 months ago and have been reading it on and off since. I just finished the last topic ("Item 55") a few hours ago.&lt;/p&gt;
&lt;h3&gt;More Effective C++&lt;/h3&gt;
&lt;p&gt;The copy I purchased (online, this time around, those deals are too good to ignore) is a 2002 reprint (ISBN: 978-81-7758-980-1) as a paperback. The paper was mediocre as the pages were pretty flimsy. Unlike the first instalment of the book, this one had major issues with ghosting of highlighted parts.&lt;/p&gt;
&lt;p&gt;As with the first part of the series, this book too is divided into multiple sections and each section has a bunch of topics, and again there were no exercises as such. Of the 35 Items presented, the following were the most appealing/relevant to my circumstances&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 2  : Prefer C++ style casts &lt;/li&gt;
&lt;li&gt;Item 3  : Never treat arrays polymorphically&lt;/li&gt;
&lt;li&gt;Item 5  : Be wary of user conversion functions&lt;/li&gt;
&lt;li&gt;Item 9  : Use destructors to prevent resource leaks&lt;/li&gt;
&lt;li&gt;Item 13 : Catch exceptions by reference&lt;/li&gt;
&lt;li&gt;Item 15 : Understand costs of exception handling&lt;/li&gt;
&lt;li&gt;Item 18 : Amortize the cost of expected computation&lt;/li&gt;
&lt;li&gt;Item 20 : Facilitate return-value optimization (RVO)&lt;/li&gt;
&lt;li&gt;Item 28 : Smart Pointers&lt;/li&gt;
&lt;li&gt;Item 33 : Make non-leaf classes abstract&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Effective STL&lt;/h3&gt;
&lt;p&gt;Was much of the same stuff as the previous two books in this series. This was once again a 2002 reprint (ISBN: 978-81-7758-908-5) paperback. Paper quality was better than More Effective C++ but I did encounter slight ghosting of highlights. While most of the content in Effective STL was virtually new to me, I found these items the most helpful, out of the total 50 presented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 3  : Make copying cheap &amp;amp; correct for containers&lt;/li&gt;
&lt;li&gt;Item 6  : Be alert for C++'s most vexing parse &lt;/li&gt;
&lt;li&gt;Item 8  : Never create containers of &lt;code&gt;auto_ptr&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Item 9  : Choose carefully among erasing options&lt;/li&gt;
&lt;li&gt;Item 13 : Prefer &lt;code&gt;vector&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; to dynamically allocated arrays&lt;/li&gt;
&lt;li&gt;Item 14 : Use &lt;code&gt;reserve&lt;/code&gt; to avoid unnecessary reallocations&lt;/li&gt;
&lt;li&gt;Item 18 : Avoid using &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 19 : Understand differences between &lt;code&gt;equality&lt;/code&gt; and &lt;code&gt;equivalence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 24 : Choose carefully between &lt;code&gt;map::operator[]&lt;/code&gt; and &lt;code&gt;map::insert&lt;/code&gt; when efficiency is important&lt;/li&gt;
&lt;li&gt;Item 27 : Use &lt;code&gt;distance&lt;/code&gt; and &lt;code&gt;advance&lt;/code&gt; to convert &lt;code&gt;const_iterator&lt;/code&gt;s to &lt;code&gt;iterator&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Item 32 : Follow &lt;code&gt;remove&lt;/code&gt;-like algorithms by &lt;code&gt;erase&lt;/code&gt; if you really want to remove something&lt;/li&gt;
&lt;li&gt;Item 36 : Understand the proper implementation of &lt;code&gt;copy_if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 41 : Understand the reasons for &lt;code&gt;ptr_fun&lt;/code&gt;, &lt;code&gt;mem_fun&lt;/code&gt; and &lt;code&gt;mem_fun_ref&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 49 : Learn to decipher STL-related compiler diagonostics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I'd consider that both books lived up to the hype surrounding them and the first installment in the series. Unlike the first part, these were focused a lot more on techniques and features beyond the basics. Between the two, More Effective C++ was a bit of heavy/intensive read esp. towards the end.  &lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>Books To Read</title><link href="/books-to-read.html" rel="alternate"></link><published>2012-03-31T12:12:00+05:30</published><updated>2012-03-31T12:12:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2012-03-31:/books-to-read.html</id><summary type="html">&lt;p&gt;My list of Books to Read&lt;/p&gt;</summary><content type="html">&lt;p&gt;After reading the Effective C++ book from Scott Meyers last year, I wanted to build a list of programming books, focused on C, C++ and UNIX/Linux that I wanted to read. This is that list in no particular order:&lt;/p&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] Mythical Man Month&lt;/li&gt;
&lt;li&gt;[x] Code Complete&lt;/li&gt;
&lt;li&gt;[ ] Clean Coder&lt;/li&gt;
&lt;li&gt;[ ] Pragmatic Programmer&lt;/li&gt;
&lt;li&gt;[ ] Design Patterns (GoF book)&lt;/li&gt;
&lt;li&gt;[ ] Designing Object Oriented Software&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C/C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] K&amp;amp;C C&lt;/li&gt;
&lt;li&gt;[x] C++ Programming Language&lt;/li&gt;
&lt;li&gt;[x] Effective C++&lt;/li&gt;
&lt;li&gt;[ ] More Effective C++&lt;/li&gt;
&lt;li&gt;[ ] Effective STL&lt;/li&gt;
&lt;li&gt;[ ] C++ Standard Template Library&lt;/li&gt;
&lt;li&gt;[ ] Algorithms in C++&lt;/li&gt;
&lt;li&gt;[ ] C++ FAQs&lt;/li&gt;
&lt;li&gt;[ ] Exceptional C++&lt;/li&gt;
&lt;li&gt;[ ] More Exceptional C++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UNIX/Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] The Design of the UNIX Operating System&lt;/li&gt;
&lt;li&gt;[ ] Linux Kernel Development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Scheme Programming Language&lt;/li&gt;
&lt;li&gt;[ ] Structure &amp;amp; Interpretation of Computer Programs&lt;/li&gt;
&lt;li&gt;[ ] Introduction to Algorithms &lt;/li&gt;
&lt;li&gt;[ ] Learning DCOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't intend to review or write about all of these books, maybe a few that I found the most impactful personally.&lt;/p&gt;</content><category term="programming"></category><category term="book-review"></category></entry><entry><title>Effective C++ : A Book Review</title><link href="/effective-c-a-book-review.html" rel="alternate"></link><published>2011-12-17T18:03:00+05:30</published><updated>2011-12-17T18:03:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2011-12-17:/effective-c-a-book-review.html</id><summary type="html">&lt;p&gt;My review of the Effective C++ book&lt;/p&gt;</summary><content type="html">&lt;p&gt;With more of my day-to-day work moving to C++, I was looking for a nice book to help me get upto speed with C++, best practices and some of the gotchas that C++ is ~famous~ infamous for. This book in particular had rave reviews and was recommended by multiple people, with colleagues, former colleagues and internet strangers all saying very good things about it. I purchased by copy from Sapna Book House about 2 months ago and have been reading it on and off since. I just finished the last topic ("Item 55") a few hours ago.&lt;/p&gt;
&lt;p&gt;The copy I have with me is a 2008 reprint of the 3rd edition of this book (ISBN: 978-81-317-1480-5). The book is a paperback, printed paper is of good quality and highlighting does not ghost or show thru. No complaints on the paper or binding quality. The book has held up well.&lt;/p&gt;
&lt;p&gt;With regard to content, the book is divided into multiple sections and each section has a bunch of topics. Discussion is presented as an ordered list of "Item"s. 
This makes it very easy to pause and take a break between topics and get back to the book right after what you'd already read. 
Unfortunately, there weren't any exercises apart from a few teasers before gotchas that served as prompts for the reader to think things through and form a view before the "big reveal" of the gotcha and an explaination of why the compiler/language behaved the way it did. This was a deviation from perhaps some of the "textbook" style books that I had read so far, including K&amp;amp;R, which had really great compliment of thought provoking exercises.&lt;/p&gt;
&lt;p&gt;Of the 55 Items presented, the following were the most relevant to me, someone who was "migrating" to C++ from C:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 2  : Prefer &lt;code&gt;const&lt;/code&gt;s, &lt;code&gt;enum&lt;/code&gt;s and &lt;code&gt;inline&lt;/code&gt;s to &lt;code&gt;#define&lt;/code&gt;s &lt;/li&gt;
&lt;li&gt;Item 5  : Know what functions C++ silently writes and calls&lt;/li&gt;
&lt;li&gt;Item 8  : Prevent exceptions from leaving destructors&lt;/li&gt;
&lt;li&gt;Item 9  : Never call virtual fucntions during construction and destruction&lt;/li&gt;
&lt;li&gt;Item 14 : Think carefully about copying behaviour in resource managing classes&lt;/li&gt;
&lt;li&gt;Item 19 : Treat class design as type design&lt;/li&gt;
&lt;li&gt;Item 26 : Postpone variable definitions&lt;/li&gt;
&lt;li&gt;Item 27 : Minimize Casting&lt;/li&gt;
&lt;li&gt;Item 32 : Make sure public inheritance models "is-a"&lt;/li&gt;
&lt;li&gt;Item 41 : Understand implicit interfaces and compile-time polymorphism&lt;/li&gt;
&lt;li&gt;Item 48 : Be aware of template metaprogramming&lt;/li&gt;
&lt;li&gt;Item 54 : Familiarize yourself with the standard library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The items were relatively independent that I could jump around the book and cover them in this order, having to refer back to other sections and items occasionally. This lent the book being a very easy read, although some of the material presented was a little tricky and I had to try a couple of short programs on my own to really "get" the material.&lt;/p&gt;
&lt;p&gt;Overall, I'd say the book lived up to the excellent reviews and positive feedback from colleagues and I would gladly recommend it to someone in my shoes :). I would definitely consider reading more books from Scott Meyers. viz. : More Effective C++ and Effective STL which I understand are presented in a similar format and cover much of the same material. &lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>The Hashes</title><link href="/the-hashes.html" rel="alternate"></link><published>2011-10-08T13:22:00+05:30</published><updated>2011-10-08T13:22:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2011-10-08:/the-hashes.html</id><summary type="html">&lt;p&gt;TIL about the # (Stringizing) and ## (Concatenation) operators of the Pre-processor&lt;/p&gt;</summary><content type="html">&lt;p&gt;I ran into a seemingly straight forward problem earlier this week: treat a particular &lt;code&gt;#define&lt;/code&gt; value as either string or int, depending on the context where it is used. A naive solution to is repeating the &lt;code&gt;#define&lt;/code&gt; twice, once as a string and then as a integer:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define SOME_VALUE_INT 42&lt;/span&gt;
&lt;span class="cp"&gt;#define SOME_VALUE_STR &amp;quot;42&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;... and using the right value depending on the context. Not only is this naive method a violation of DRY, but it is also very crude and inelegant. Having multiple such &lt;code&gt;#define&lt;/code&gt;ed constants are a maintainance disaster waiting to happen. My search for a better way to deal with this lead me to a very relevant &lt;a href="https://stackoverflow.com/questions/2653214/stringification-of-a-macro-value"&gt;question&lt;/a&gt; on SO and down I went the rabbit hole that is the the C Pre-processor. This is a summary of my learning and notes for my future self.&lt;/p&gt;
&lt;h3&gt;The Stringizing Operator : &lt;code&gt;#&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves the problem above rather elegantly, as described the accepted answer to in the SO question above:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define xstr(a) str(a)&lt;/span&gt;
&lt;span class="cp"&gt;#define str(a) #a&lt;/span&gt;

&lt;span class="cp"&gt;#define RECORDS_PER_PAGE 10&lt;/span&gt;

&lt;span class="cp"&gt;#define REQUEST_RECORDS \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;SELECT Fields FROM Table WHERE Conditions&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; OFFSET %d * &amp;quot; xstr(RECORDS_PER_PAGE) \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; LIMIT &amp;quot; xstr(RECORDS_PER_PAGE) &amp;quot;;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows the preprocessor to replace anything prefixed with a &lt;code&gt;#&lt;/code&gt; with the literal text of the actual argument. The argument is not macro-expanded.&lt;/li&gt;
&lt;li&gt;leading &amp;amp; trailing whitespace is ignored. Whitespaces in the middle of the text converted to a single space&lt;/li&gt;
&lt;li&gt;to stringize the result of expansion of a macro argument, you have to use two levels of macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Concatenation Operator : &lt;code&gt;##&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves a somewhate related problem of merging or combining two macro values into a single string. The &lt;code&gt;##&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;performs token pasting : two tokens on either side of ‘##’ operator are combined into a single token. The the actual arguments are not macro-expanded.&lt;/li&gt;
&lt;li&gt;cannot create a comment by concatenating ‘/’ and ‘*’.&lt;/li&gt;
&lt;li&gt;comments in arguments that will be concatenated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While these operators present interesting possibilities, using them for all but the most basic and straight forward needs would be difficult. Although handy in a few situations, they are qutie limited and come with a bunch of caveats. However, there still are a few corner cases where they do make lives of programmers a lot simpler.&lt;/p&gt;</content><category term="programming"></category><category term="c"></category><category term="preprocessor"></category><category term="til"></category></entry><entry><title>No strtoul in C#</title><link href="/no-strtoul-in-c.html" rel="alternate"></link><published>2011-05-26T08:41:00+05:30</published><updated>2011-05-26T08:41:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2011-05-26:/no-strtoul-in-c.html</id><summary type="html">&lt;p&gt;TIL about the lack of a clean &lt;code&gt;strtoul&lt;/code&gt; library function in C# that can infer base of the input string&lt;/p&gt;</summary><content type="html">&lt;p&gt;Off late, I've been supporting a legacy C#/WinForms application written to configure the look-and-feel of a OpenGL/GLES based 3D rendering engine, which itself is written in C++. While the rendering engine and learning OpenGL itself remains my primary focus, this problem with C# was rather interesting. &lt;/p&gt;
&lt;h3&gt;C++ and &lt;code&gt;strtoul&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.cplusplus.com/reference/cstdlib/strtoul/"&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/a&gt; library function in C++ is very very useful for dealing with numbers in multiple bases and converting between them. When the &lt;code&gt;radix&lt;/code&gt; (aka &lt;code&gt;base&lt;/code&gt;) parameter is passed in as &lt;code&gt;0&lt;/code&gt;, this function determines the input base automatically and returns the result in base-10. Therefore, the below line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strtoul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0xa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;... will set &lt;code&gt;x&lt;/code&gt; to the value &lt;code&gt;10&lt;/code&gt; (since hex &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt; decimal) The problem at hand required a similar library function in C#.&lt;/p&gt;
&lt;h3&gt;The Search and The Solution&lt;/h3&gt;
&lt;p&gt;MS &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32"&gt;ToUInt32&lt;/a&gt; docs don't really have much to say on this topic, they're mostly concerned with converting between &lt;code&gt;float&lt;/code&gt;s and integers rather than integers of different bases. Not finding what I need in MS docs or elsewhere, I posted a question on &lt;a href="https://stackoverflow.com/questions/6080065/strtoul-equivalent-in-c-sharp"&gt;StackOverflow&lt;/a&gt; and the following solution was suggested:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;While not as elegant as the C++ way, this will do for now. Just before I wrote this note and shared with everyone, an unlikely alternative was found by a colleague in the discussion posted &lt;a href="https://bytes.com/topic/c-sharp/answers/226729-easy-hex-string-0x1234-integer-conversion"&gt;here&lt;/a&gt;. However, I'm yet to try this out and I do not fully understand the implications of passing in the &lt;code&gt;NumberStyles&lt;/code&gt; enum and the kind of numbers it might end up picking up as valid. On the surface, I don't see anything obviously wrong/off here.&lt;/p&gt;</content><category term="programming"></category><category term="csharp"></category><category term="til"></category></entry></feed>