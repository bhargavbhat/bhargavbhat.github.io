<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bhargav's Homepage</title><link href="https://bhargavbhat.me/" rel="alternate"></link><link href="https://bhargavbhat.me/feeds/all-en.atom.xml" rel="self"></link><id>https://bhargavbhat.me/</id><updated>2021-11-01T14:31:00+05:30</updated><entry><title>Moving to Pelican &amp; Reclaiming Old Writing</title><link href="https://bhargavbhat.me/moving-to-pelican-reclaiming-old-writing.html" rel="alternate"></link><published>2021-11-01T14:31:00+05:30</published><updated>2021-11-01T14:31:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2021-11-01:/moving-to-pelican-reclaiming-old-writing.html</id><summary type="html">&lt;p&gt;Moving to Pelican and Reclaiming Old writing across notes, text files, emails and shared docs&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is just a summary of me doing a Deepawali cleaning of all of my notes, old emails, text files and Google Drive stuff and moving it all under a managable blog hosted on GitHub pages with &lt;a href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Installation &amp;amp; Theme Selection&lt;/h4&gt;
&lt;p&gt;Pelican install was very quick and straight forward process, just follow the instructions laid out in the "quickstart" section of the docs and a fully functional, ready to serve blog was ready on my local machine. This also allowed me to try out a few themes, verify formatting (most of the posts I have were written a email, text files or shared docs, not markdown) and ensure that everything looked fine.&lt;/p&gt;
&lt;p&gt;Theme selection was a slighly longer task, mostly consisted of &lt;a href="http://www.pelicanthemes.com/"&gt;browsing&lt;/a&gt; available options, trawling the respective github repos and picking one that clicked visually and feature-wise. Then came the testing phase of trying it on the articles and pages that I had migrated/created so far. My main criteria for theme selection were a clean design, pleasing colours, tags &amp;amp; categories support along with a search function. Although I couldn't find one that checked all the boxes, I found that &lt;a href="https://github.com/laughk/pelican-hss"&gt;pelican-hss&lt;/a&gt; had all that I wanted (save the search function). I picked that theme, made a few tweaks to the supplied pygments CSS and &lt;code&gt;base.html&lt;/code&gt; template and decided to call it a day.&lt;/p&gt;
&lt;h4&gt;Deployment to Github Pages&lt;/h4&gt;
&lt;p&gt;My previous homepage was a rather simple landing page, with links to social media profiles:
&lt;img alt="Previous Homepage" src="https://bhargavbhat.me/images/home_page.png"&gt;&lt;/p&gt;
&lt;p&gt;and this was served out of github pages as a simple &lt;code&gt;index.html&lt;/code&gt; file, forked from the html5up repo. Moving to pelican meant setting up branches slightly differently. I chose to use the &lt;code&gt;content&lt;/code&gt; branch to contain all of the Pelican stuff.&lt;/p&gt;
&lt;h4&gt;Learning&lt;/h4&gt;
&lt;p&gt;The real power, flexibility &amp;amp; convenience of static hosting is apparent from all of the personal blogs and project pages hosted on GH pages. For me, a lot of the learning was around pelican,setting up venv right and migrating content&lt;/p&gt;
&lt;h4&gt;Road Ahead&lt;/h4&gt;
&lt;p&gt;A lot of my old notes, shared docs and learning are still scattered all over platforms. Although not too many public/shared posts and notes exist, I still have to sift through them all, deal with dead links and filter out stuff that's relevant and applicable to a wider audience. Most of the notes that I have are specific to the particular teams, products or siutations. I've gotten thru a few of these notes and will continue to add them to the site as fast as I can. As I make my way around this old stuff, a lot more posts should start popping up on the homepage. &lt;/p&gt;
&lt;p&gt;PS: Dates and stuff for these old posts is from file meta data, may not be 100% accurate. Stuff that was once WIP has likely been abandoned and/or is no longer relevant. Links have been updated and dead links removed (where applicable). If you find something odd or inaccurate, please do reach out. :)&lt;/p&gt;</content><category term="meta"></category></entry><entry><title>NEF Thumbnails in Nautilus</title><link href="https://bhargavbhat.me/nef-thumbnails-in-nautilus.html" rel="alternate"></link><published>2020-10-02T20:18:00+05:30</published><updated>2020-10-02T20:18:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2020-10-02:/nef-thumbnails-in-nautilus.html</id><summary type="html">&lt;p&gt;A hacky workaround for getting NEF thumbnails to work in Nautilus on Ubuntu 20.04&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I upgraded to the latest Ubuntu LTS 20.04 "Focal" and ran into an annoying bug with Nautilus : &lt;code&gt;NEF&lt;/code&gt; (Nikon camera raw) files were not having their thumbnails generated, where as this wasn't an issue with 18.04 at all. The issue is a known &lt;a href="https://bugs.launchpad.net/ubuntu/+source/gnome-raw-thumbnailer/+bug/1871862"&gt;bug&lt;/a&gt;, apparently due to non-availability of a pacakge on 20.04 (based on my very limited understanding).&lt;/p&gt;
&lt;p&gt;A bit of searching lead me to this old SO &lt;a href="https://askubuntu.com/questions/283072/nautilus-isnt-displaying-thumbnails-for-my-nef-files-photo-raw"&gt;question&lt;/a&gt; that appears to be relevant to the problem I was facing and so down the rabbit hole I go. The first stumbling block was that I couldn't quite find the right file...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nvim /usr/share/thumbnailers/
atril.thumbnailer  gdk-pixbuf-thumbnailer.thumbnailer  gnome-font-viewer.thumbnailer  librsvg.thumbnailer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... the files on my system were quite a bit different from what the top voted answer indicate. However, the files that do showup are similar enough to what's posted in the answer. A little more digging around and &lt;code&gt;gdk-pixbuf-thumbnailer.thumbnailer&lt;/code&gt; appears to be the best candidate for tweaking and the contents of the file more or less confirm this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;thumbnailers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;thumbnailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thumbnailer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Thumbnailer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;TryExec&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;thumbnailer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;thumbnailer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;MimeType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;navi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jpeg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;anymap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;graymap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pixmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tiff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xpixmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xbitmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quicktime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qtif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so... I just append &lt;code&gt;image/x-nef;image/x-nikon-nef;&lt;/code&gt; to that file, save changes and restart &lt;code&gt;nautilus&lt;/code&gt; and &lt;em&gt;viola!&lt;/em&gt; working thumbnails for &lt;code&gt;NEF&lt;/code&gt;s. A 10yr old solution still works, more or less :D&lt;/p&gt;
&lt;p&gt;PS: Obligatory &lt;a href="https://xkcd.com/979/"&gt;xkcd&lt;/a&gt;&lt;/p&gt;</content><category term="tools"></category><category term="nautilus"></category><category term="thumbnails"></category><category term="nef"></category></entry><entry><title>Zoom Shortcuts</title><link href="https://bhargavbhat.me/zoom-shortcuts.html" rel="alternate"></link><published>2020-05-01T21:52:00+05:30</published><updated>2020-05-01T21:52:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2020-05-01:/zoom-shortcuts.html</id><summary type="html">&lt;p&gt;Keyboard shortcuts for navigating zoom&lt;/p&gt;</summary><content type="html">&lt;p&gt;With zoom becoming the reality, here's a cheatsheet of useful zoom shortcuts (some learnt the hardway and most from looking at the options):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Command + Shift + A&lt;/code&gt; : toggle mute (can be set as global setting with a diff combo, eg: &lt;code&gt;Command + Shift + 1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Command + Shift + T&lt;/code&gt; : pause screenshare&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Command + U&lt;/code&gt; : show participants list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Option + Y&lt;/code&gt; : Raise hand or lower hand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Full documentation &lt;a href="https://support.zoom.us/hc/en-us/articles/205683899-hot-keys-and-keyboard-for-zoom"&gt;here&lt;/a&gt;, or just goto zoom preferences and adjust keyboard shortcuts directly within the application.&lt;/p&gt;</content><category term="tools"></category><category term="zoom"></category><category term="shortcuts"></category></entry><entry><title>Working Effectively with Legacy Code : A Review</title><link href="https://bhargavbhat.me/working-effectively-with-legacy-code-a-review.html" rel="alternate"></link><published>2019-12-30T21:44:00+05:30</published><updated>2019-12-30T21:44:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2019-12-30:/working-effectively-with-legacy-code-a-review.html</id><summary type="html">&lt;p&gt;My review of Working Effectively with Legacy Code&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is my summary of takeaways from the book Working Effectively with Legacy Code, written by Micheal Feathers. I purchased a 2004 re-print in paperback with ISBN 978-0131177055. Paper quality was good and I did not have any issues with highlighter ghosting, but the binding seems a bit suspect. Probably will have to liberally employ paper glue and tape to mend it. The content of the book itself was pretty good. The key takeaways were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add tests first, changing as little of the code as possible to facilitate testing&lt;/li&gt;
&lt;li&gt;Identify &lt;strong&gt;seams&lt;/strong&gt; and start adding tests from these seams&lt;/li&gt;
&lt;li&gt;Tests should be quick to run and should not involve communication with external components (network, DB etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Characterization Tests&lt;/strong&gt; : tests as a means of ensuring correctness and documenting the code (behaviour and understanding of the codebase)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;extract interfaces&lt;/em&gt; and &lt;em&gt;parameterized constructors&lt;/em&gt; as tools for breaking dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the book was a decent read discussing specific techniques that could be put into use right away. The overarching theme was refactoring while minimizing risk, i.e safely isolating changes and confidently refactoring an existing codebase without much in the way of useful documentation on tests.&lt;/p&gt;</content><category term="programming"></category><category term="book-review"></category></entry><entry><title>TIL Darktable</title><link href="https://bhargavbhat.me/til-darktable.html" rel="alternate"></link><published>2019-10-07T21:34:00+05:30</published><updated>2019-10-07T21:34:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2019-10-07:/til-darktable.html</id><summary type="html">&lt;p&gt;A chance encounter with Darktable and dabbling with this interesting tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I got hold of a DSLR a little over 3years ago and years of using loaners before that, I've been using &lt;a href="https://www.rawtherapee.com/"&gt;rawtherapee&lt;/a&gt; to process the raw files from cameras. I started with v4.2 of the program and I'm currently using v5.6 that was released just a few months ago. It works well with Shotwell and produces pretty good results. &lt;a href="https://www.youtube.com/watch?v=ccUv02QFMxs"&gt;This&lt;/a&gt; tutorial covers the worflow for rawtherapee.&lt;/p&gt;
&lt;p&gt;I mostly use rawtherapee for basic edits : slight exposure tweaks, crops and the occasional horizon straightening. Along with the usual suspects: noise reduction, profiled lens correction, whitebalance, contrast &amp;amp; saturation. Today, I was looking at getting a few more of my old raw files processed and before I started the process, I first wanted to see a summary video or two of the new stuff in v5.6. However, the YouTube suggestion algorithm had a different fate planned and surfaced &lt;a href="https://www.youtube.com/watch?v=Fv8yKb0oLJM"&gt;this&lt;/a&gt; interesting video, and that was how I was introduced to darktable :)&lt;/p&gt;
&lt;p&gt;After spending most of the day looking into more darktable videos (instead of actually working on the raw files), here is what I was able to take away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;darktable and rawtherapee use a bunch of the same libraries to get a lot of the "plumbing" done. Each has a different approach though.&lt;/li&gt;
&lt;li&gt;darktable supports one feature (still) missing in rawtherapee : masks for selective application of edits&lt;/li&gt;
&lt;li&gt;darktable supports one other feature (still) missing in rawtherapee : spot-removal (handy to get rid of dustbins and such)&lt;/li&gt;
&lt;li&gt;darktable has a batch-processing capability (copy/paste/save history) for quickly dealing with a bunch of similar images, similar to Paste Partial, but more granular&lt;/li&gt;
&lt;li&gt;darktable has a cleaner UI (reminiscent of Lightroom) and a "favourites" options to pin/arrange tools as per your liking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... so does that mean I'm moving over to darktable? Well, just like with the whole vim vs nvim thing a couple of years ago, I'll probably have both installed for a while and then make a choice based on what "feels" right after a few months of use :)&lt;/p&gt;</content><category term="tool"></category><category term="photography"></category><category term="darktable"></category><category term="rawtherapee"></category></entry><entry><title>mbed Simulator</title><link href="https://bhargavbhat.me/mbed-simulator.html" rel="alternate"></link><published>2018-10-01T12:26:00+05:30</published><updated>2018-10-01T12:26:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2018-10-01:/mbed-simulator.html</id><summary type="html">&lt;p&gt;TIL mbed simulator online tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I came across the online simulator for mbed, available &lt;a href="https://simulator.mbed.com/"&gt;here&lt;/a&gt;. Although it is currently marked as "experimental", this simulator is pretty full featured and allows developers to test their mbed OS 5 applications without really having to go thru the while code-build-flash-test cycle. Although it doesn't claim to be cycle-accurate, it is really a handy way to test code written against mbed and also for learning/lab environments where this tool can definitely reduce the need for physical devkits or boards.&lt;/p&gt;
&lt;p&gt;The tool was announced earlier this year during the mbed conference and details about the tool are available &lt;a href="https://os.mbed.com/blog/entry/introducing-mbed-simulator/"&gt;here&lt;/a&gt;. The associated &lt;a href="https://github.com/ARMmbed/mbed-connect-2018-simulator"&gt;code repo&lt;/a&gt; has a bunch of interesting samples including ones that demonstrate the networking capabilities of the simulator.&lt;/p&gt;</content><category term="tool"></category><category term="simulator"></category><category term="mbed"></category></entry><entry><title>C++ 17 Features</title><link href="https://bhargavbhat.me/c-17-features.html" rel="alternate"></link><published>2018-01-26T19:57:00+05:30</published><updated>2018-01-26T19:57:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2018-01-26:/c-17-features.html</id><summary type="html">&lt;p&gt;TIL about the C++17 release and some of the new features in the language and the STL&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometime last year the C++17 standard was finalized, although there weren't too many new features in the language itself that were relevant to an application developer focused on embedded and resource constrained development, there were three that stood out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guaranteed Copy-Elision&lt;/strong&gt; : Essentially, the standard now mandates RVO, although most compilers were already doing this anyway&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;constexpr&lt;/code&gt; can be used with &lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; : An interesting feature that can eliminate a bunch of &lt;code&gt;#ifdef&lt;/code&gt;s, this allows programmers to use &lt;code&gt;constexpr&lt;/code&gt; with regular &lt;code&gt;if&lt;/code&gt; to compile only relevant bits of code at compile time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Initializers in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt;&lt;/strong&gt; : Similar to an &lt;code&gt;using&lt;/code&gt; block in other languages, this facility permits programmers to initailize &amp;amp; use variables within the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; blocks. Variables are automatically destroyed at the end of said block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apart from this, the STL received a few important new additions, which I would need to go over closely :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::variant&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::optional&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string_view&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An indepth summary of these features can be found &lt;a href="https://www.modernescpp.com/index.php/cpp17-core"&gt;here&lt;/a&gt; and &lt;a href="https://blogs.grammatech.com/new-features-of-c17"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall, C++17 has added more stuff than C++14, however, a lot of it is for niche or narrow usecases. I would need to understand the changes more in the upcoming days to see how best these can be leveraged in the current context.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="cpp11"></category><category term="til"></category></entry><entry><title>Holiday in Andaman Islands</title><link href="https://bhargavbhat.me/holiday-in-andaman-islands.html" rel="alternate"></link><published>2017-11-25T14:42:00+05:30</published><updated>2017-11-25T14:42:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2017-11-25:/holiday-in-andaman-islands.html</id><summary type="html">&lt;p&gt;Photos from our 6D/5N holiday in Andaman Islands&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Selected photos from 6D/5N trip to Andaman Islands covering Port Blair - Havelock - Neil - Port Blair&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Day 1 : Arrival in Port Blair &amp;amp; Visit to Cellular Jail&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 1" src="https://bhargavbhat.me/images/andamans/day1_landing.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 1" src="https://bhargavbhat.me/images/andamans/day1_cellularjail1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 1" src="https://bhargavbhat.me/images/andamans/day1_cellularjail2.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 2 : Ferry to Havelock Island - Visit Elephant Island, Snorkelling, Sea Walk &amp;amp; Visit Radhanagar Beach&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/andamans/day2_boat2havelock.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/andamans/day2_havelock_elephantisland.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/andamans/day2_havelock_snorkel1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/andamans/day2_havelock_snorkel2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/andamans/day2_havelock_radhanagar.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 3 : Ferry to Neil Island - Visit Bharatpur Beach &amp;amp; Rock Formation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/andamans/day3_neil_beach.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/andamans/day3_neil.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/andamans/day3_neil_bharatpur.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/andamans/day3_neil_crab_bharatpur.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/andamans/day3_neil_mangroves_jetty.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Days 4 &amp;amp; 5 : Ferry to Port Blair - Visit Ross Island, Corbyn Beach&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 5" src="https://bhargavbhat.me/images/andamans/day5_pb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 5" src="https://bhargavbhat.me/images/andamans/day5_ross_island.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 5" src="https://bhargavbhat.me/images/andamans/day5_ross_beach.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 6 : Visit Chatham Island &amp;amp; Departure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 6" src="https://bhargavbhat.me/images/andamans/day6_cobyn.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 6" src="https://bhargavbhat.me/images/andamans/day6_chatham.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 6" src="https://bhargavbhat.me/images/andamans/day6_depart.jpg"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="holiday"></category><category term="andaman"></category></entry><entry><title>nand2tetris</title><link href="https://bhargavbhat.me/nand2tetris.html" rel="alternate"></link><published>2017-01-21T13:16:00+05:30</published><updated>2017-01-21T13:16:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2017-01-21:/nand2tetris.html</id><summary type="html">&lt;p&gt;TIL about nand2tertis and this is my attempt at following along the Coursera MOOC&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.nand2tetris.org/"&gt;Nand to Tetris&lt;/a&gt; is an interesting book/teaching aid that I had heard of before, but couldn't quite find the time to pick up. A few months ago, a &lt;a href="https://www.youtube.com/watch?v=wTl5wRDT0CU"&gt;teaser&lt;/a&gt; was uploaded announcing that material from this book would be adapted into a &lt;a href="https://www.coursera.org/learn/build-a-computer"&gt;Coursera MOOC&lt;/a&gt;. This piqued my interest. I would be following along this MOOC in a self paced manner and uploading code to my personal &lt;a href="https://github.com/bhargavbhat/nand2tetris"&gt;repo&lt;/a&gt; as I go along.&lt;/p&gt;
&lt;p&gt;I would starting with &lt;code&gt;Unit 0 : Introduction&lt;/code&gt; and &lt;code&gt;Unit 1 : Boolean Functions &amp;amp; Logic Gates&lt;/code&gt; today. I would update the repo with the code as I progress along.&lt;/p&gt;</content><category term="programming"></category><category term="mooc"></category><category term="coursera"></category></entry><entry><title>Working at a Startup : Notes &amp; Observations</title><link href="https://bhargavbhat.me/working-at-a-startup-notes-observations.html" rel="alternate"></link><published>2016-12-30T19:53:00+05:30</published><updated>2016-12-30T19:53:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2016-12-30:/working-at-a-startup-notes-observations.html</id><summary type="html">&lt;p&gt;Notes and observations after working for 6 months at a startup&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;In Jul 2016, I switched to a new role as a Tech Lead at an Internet of Things (IoT) focused startup. Prior to this, my career was with MNCs of various sizes. This is a reflection of the change 6months into the new company&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This past July, I finally made the plunge and joined a startup. The opportunity was too good to pass up - focus on IoT and work on an in-house product as well as helping customers realize thier vision for connected devices and next-gen connectivity technologies. Technically, this was the perfect mix for the stage of career I was at. Now, 6 months on, I am glad to have taken this step.&lt;/p&gt;
&lt;h4&gt;Culture Shock&lt;/h4&gt;
&lt;p&gt;As someone that was associated with MNCs all throughout their professional career, this switch was somewhat of a culture shock, but in a good way :). The fast-paced, efficiency focused style of working, having only as much process in place as necessary and the constant multi-tasking between unrelated asks was very new. Loosely structured days and a higher level of autonomy were welcome changes as well. Also new was the more-or-less constantly connected nature of the role and the blurring boundaries between "office" and "home". Flex-hours and Work-from-Home (sometimes for an entire week leading upto holidays) was an interesting experience for me. However, all said and done, I really found this new position expanding my horizons on what different styles of working looked like. After a couple of days being confused and bewildered, I was able to get into the groove and it all started feeling natural a couple of weeks in. &lt;/p&gt;
&lt;h4&gt;Learning&lt;/h4&gt;
&lt;p&gt;While I'm pretty sure there's a lot more to learn, 6 months in, here's the most impactful learnings since joining this position:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plan ahead and communicate prefer communication over written medium : Flex-time and WFH make this more or less essential for communication outside of scheduled meetings and Agile ceremonies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constant Adaptation : Even with a good plan in place, things outside one's control will force change in course. The only way forward is to adapt constantly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Failure is an Option : In certain contexts, it is definitely preferable to fail fast and course correct rather than spend precious few resources on big obstacles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-tasking : While most professionals will multi-task on a daily basis, the range or breadth of tasks would be rather limited. This is not really the case in a startup with limited engineering staff and multiple unrealted programs running in parallel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learning on the Job : is more or less a requirement and combined with constant adaptation and accepting &amp;amp; moving on from failures, one's learning is accelerated manyfold.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Road Ahead&lt;/h4&gt;
&lt;p&gt;This journey has just started for me professionally and I'm sure there is a lot more this onion than the few layers I've managed to peel as yet. From guiding &amp;amp; mentoring to leading and working through people, there is a lot more for me to discover.&lt;/p&gt;</content><category term="meta"></category></entry><entry><title>97 Things Every Programmer Should Know : A Review</title><link href="https://bhargavbhat.me/97-things-every-programmer-should-know-a-review.html" rel="alternate"></link><published>2016-08-14T22:37:00+05:30</published><updated>2016-08-14T22:37:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2016-08-14:/97-things-every-programmer-should-know-a-review.html</id><summary type="html">&lt;p&gt;My review of 97 Things Every Programmer Should Know&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came across an interesting &lt;a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/"&gt;link&lt;/a&gt; earlier this week, an online book titled &lt;code&gt;97 Things Every Programmer Should Know&lt;/code&gt;. It was presented in a format familar to readers of the &lt;code&gt;More Effective&lt;/code&gt; series by Scott Meyers, viz. a series of loosely related items or topics presented in a numbered manner. The reader however, is free to jump around and read topics that interest them the most. I personally find this approach to organizing books very helpful.&lt;/p&gt;
&lt;p&gt;Of the various topics and anecdotes presented, I found these the most relevant and impactful (personally):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Boy Scout Rule&lt;/em&gt; : leave code a &lt;em&gt;little&lt;/em&gt; better than how you found it&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Beauty in Simplicity&lt;/em&gt; : simple code is beautiful&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Code Reviews&lt;/em&gt; : as a regular activity to share knowledge, establish common patterns and conduct walkthroughs with the purpose of understanding the flow&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deploy Early and Often&lt;/em&gt;  : view deployment as an integral part of the SDLC and have deployment process in place alongside development/refactoring&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn to Estimate&lt;/em&gt; : distinguish between &lt;code&gt;estimate&lt;/code&gt; , &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;commitment&lt;/code&gt;. Ensure all stakeholders have the same understanding wrt these terms&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Read Code&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Write Tests for People&lt;/em&gt; : tests as a guide to understanding code and practice of testing your tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I did see a good amount of overlap between this book and &lt;code&gt;The Pragmatic Programmer&lt;/code&gt;, there were several items here that were new and interesting.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>Holiday in Kerala</title><link href="https://bhargavbhat.me/holiday-in-kerala.html" rel="alternate"></link><published>2016-01-15T11:33:00+05:30</published><updated>2016-01-15T11:33:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2016-01-15:/holiday-in-kerala.html</id><summary type="html">&lt;p&gt;Photos from our 5D/4N holiday in Kerala&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Selected photos from 5D/4N trip to Kerala covering Kochi - Munnar - Thekkady - Allepey - Kochi&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Day 1 : Arrival in Kochi and Drive to Munnar&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 1" src="https://bhargavbhat.me/images/kerala/day1_munnar_enroute.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 2 : Munnar Local Sightseeing&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/kerala/day2_munnar_cactus.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/kerala/day2_munnar_flowers.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 2" src="https://bhargavbhat.me/images/kerala/day2_munnar_tea_estate.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 3 : Munnar to Thekkady Drive &amp;amp; Kathakali Show in Thekkady&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 3" src="https://bhargavbhat.me/images/kerala/day3_thekkady_kathakali.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 4 : Thekkady to Allepey Drive &amp;amp; Houseboat Stay&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 4" src="https://bhargavbhat.me/images/kerala/day4_allepey_boats.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 4" src="https://bhargavbhat.me/images/kerala/day4_allepey_backwaters.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 4" src="https://bhargavbhat.me/images/kerala/day4_allepey_houseboat.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Day 5 : Allepey to Kochi &amp;amp; Departure&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Day 5" src="https://bhargavbhat.me/images/kerala/day5_allepey_return.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Day 5" src="https://bhargavbhat.me/images/kerala/day5_kochi_fishing_nets.jpg"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="holiday"></category><category term="kerala"></category></entry><entry><title>C++ 14 : The new stuff</title><link href="https://bhargavbhat.me/c-14-the-new-stuff.html" rel="alternate"></link><published>2015-10-02T13:16:00+05:30</published><updated>2015-10-02T13:16:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2015-10-02:/c-14-the-new-stuff.html</id><summary type="html">&lt;p&gt;TIL about the C++14 release and the new features in this release&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometime last year the C++14 standard was finalized. Although, this is specified to be a minor release to the standard, it does bring some very helpful features. As I understand, new versions of most compilers support these features in some form already and it is just a matter of using the right switch to have them behave as per the C++14 standard (rather than whatever implementation specific behaviour they implemented as an extension).&lt;/p&gt;
&lt;h3&gt;"New" New Stuff&lt;/h3&gt;
&lt;p&gt;There aren't too many "new" new features, the ones I found most helpful are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary Literals&lt;/strong&gt; : &lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt; can now be used to specify binary literals (similar to how hex numbers are specified). This is pretty helpful for specifying masks and such&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Digit Separator&lt;/strong&gt; : &lt;code&gt;'&lt;/code&gt; (single quote) can now be used between numbers to separate digits, eg: 100k can be written &lt;code&gt;100'000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STL Custom Literals&lt;/strong&gt; : STL has been extended to support string literals such as &lt;code&gt;s&lt;/code&gt; for seconds etc for various types&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Old New Stuff&lt;/h3&gt;
&lt;p&gt;With a nod to the &lt;a href="https://devblogs.microsoft.com/oldnewthing/"&gt;inspiration&lt;/a&gt; behind this title, here's the list of C++11 items that 14 improves upon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Return-type Deduction&lt;/strong&gt; : &lt;code&gt;auto&lt;/code&gt; is now permissible as a return type. Eg: &lt;code&gt;auto someFunc(int x, float y);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Lambdas&lt;/strong&gt; : &lt;code&gt;auto&lt;/code&gt; is now permissible in lambda parameter type. Eg: &lt;code&gt;[](auto x, auto y) {return x + y;};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Lambda Caputure&lt;/strong&gt; : In addition to capturing scoped variables by value, now, arbitrary values can also be passed into lambdas. Eg: &lt;code&gt;[a = x, b = x+1] {return 2*a+b;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2014/08/cpp14-here-features/"&gt;This&lt;/a&gt; and &lt;a href="https://isocpp.org/wiki/faq/cpp14-language"&gt;this&lt;/a&gt; page have been very helpful to bring me upto speed with C++14.&lt;/p&gt;
&lt;p&gt;Overall, C++14 seems to be an "hotfix" or "service pack" for C++11 rather than something major. It should be realtively simple to migrate existing C++11 code to 14 and start utilizing some of the new stuff from 14. While binary literals and generic lambdas look great on paper, I really am keen to see how much of an impact they really have on day-to-day tasks.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="cpp11"></category><category term="til"></category></entry><entry><title>NeoVim</title><link href="https://bhargavbhat.me/neovim.html" rel="alternate"></link><published>2015-09-25T10:11:00+05:30</published><updated>2015-09-25T10:11:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2015-09-25:/neovim.html</id><summary type="html">&lt;p&gt;NeoVim - a vim challenger?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I came across &lt;a href="https://neovim.io/"&gt;NeoVim&lt;/a&gt; which is a project that forks from the vim sources, cleans up a lot of the cruft from supporting esoteric platforms and operating systems and adds a bunch of really handy features like &lt;code&gt;:terminal&lt;/code&gt;. It also boasts of a new Plugin API (backwards compatible with the old plugins and VimL). All in all, neovim bills itself as the "good parts" of vim. &lt;a href="https://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/"&gt;This&lt;/a&gt; blog post goes into the details of what NeoVim brings to the table.&lt;/p&gt;
&lt;p&gt;As a long term user of vim, I'm glad that this choice exists and that the cruft of systems long dead is not holding back the development of vim, albeit as a fork. Personally, I'm not decided on whether to switch or not. Maybe I'll try it for a few weeks at home and see how things pan out :)&lt;/p&gt;</content><category term="tools"></category><category term="vim"></category><category term="editor"></category></entry><entry><title></title><link href="https://bhargavbhat.me/.html" rel="alternate"></link><published>2015-05-16T16:43:00+05:30</published><updated>2015-05-16T16:43:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2015-05-16:/.html</id><summary type="html">&lt;p&gt;Review of the&lt;/p&gt;</summary><content type="html">&lt;p&gt;I completed &lt;a href="https://courses.edx.org/courses/UTAustinX/UT.6.02x/1T2015/course/"&gt;UT.6.0x Embedded Systems - Shape the World&lt;/a&gt; from edX earlier this week. This course has a comprehensive treatment of all of the important concepts in embedded systems - both in theory and the lab exercises. I would definitely recommend folks with CS/IS/IT background looking to a get a headstart in Embedded Systems to complete this course.&lt;/p&gt;
&lt;p&gt;Some of the topics/material covered included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fundamentals of Electronics : Discrete components and Digtal Logic&lt;/li&gt;
&lt;li&gt;Programming in C&lt;/li&gt;
&lt;li&gt;Microcontrollers : I/O, Interfacing LEDs &amp;amp; Switches and the Design &amp;amp; Development Process&lt;/li&gt;
&lt;li&gt;Peripherals &amp;amp; Misc : UART, DAC, ADC, Interrupts&lt;/li&gt;
&lt;li&gt;Intro to Wireless Radios &amp;amp; IoT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notes on the Lab :&lt;/strong&gt; The course uses Kiel uVision IDE for the lab and recommends that students have the LaunchPad board to complete the lab exercises on. However, the instructors have provided a simulator facility to target the lab exercises and complete them without having to procure the board.&lt;/p&gt;</content><category term="programming"></category><category term="mooc"></category><category term="edx"></category></entry><entry><title>Overleaf - Online LaTeX Editor</title><link href="https://bhargavbhat.me/overleaf-online-latex-editor.html" rel="alternate"></link><published>2014-11-01T20:33:00+05:30</published><updated>2014-11-01T20:33:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2014-11-01:/overleaf-online-latex-editor.html</id><summary type="html">&lt;p&gt;TIL about Overleaf the online LaTeX Editor&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been using &lt;a href="https://www.latex-project.org/about/"&gt;LaTeX&lt;/a&gt; to typeset my resume for a while. The advantages are many:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plain-text format, can be added into version control&lt;/li&gt;
&lt;li&gt;Relatively easy to export to multiple formats : PDF, Word (via &lt;code&gt;pandoc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Precise positioning of elements and easier to possible to tweak formatting of certain sections or parts without ruining the formatting of the entire document&lt;/li&gt;
&lt;li&gt;Reuse and Automation (environments and commands etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My resume is based on a modified version of this &lt;a href="https://github.com/treyhunner/resume"&gt;template&lt;/a&gt; and is a simple 2-pager without too many custom elements. However, to compile and generate it on the fly meant I would need an installation of LaTeX on my laptop or a VM that I could SSH into. This was a minor incovenience, that could be worked around by having a compiled PDF in the same repo as the resume itself and that's precisely what I did until I learnt about &lt;a href="https://www.overleaf.com"&gt;Overleaf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overleaf is an awesome website that lets you import existing LaTeX projects and provides the facility to compile them into a PDF that you can download. It also has rudimentary form of workspace separation and limted version control/history features. Where I found it lacking was on the collaboration front, as far as I can see there is no straightforward way to "invite" people to edit or review your files (a-la Google Docs) and nor is there a way to send or share the final output PDF with users via email (short of downloading the PDF yourself and sharing that directly). I sure do hope they add these features soon :) &lt;/p&gt;
&lt;p&gt;PS: Obligatory LaTeX resume &lt;a href="http://stevehanov.ca/blog/?id=56"&gt;joke&lt;/a&gt;.&lt;/p&gt;</content><category term="tools"></category><category term="latex"></category><category term="til"></category></entry><entry><title>The Pragmatic Programmer : Book Review</title><link href="https://bhargavbhat.me/the-pragmatic-programmer-book-review.html" rel="alternate"></link><published>2013-12-21T14:48:00+05:30</published><updated>2013-12-21T14:48:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2013-12-21:/the-pragmatic-programmer-book-review.html</id><summary type="html">&lt;p&gt;My review of The Pragmatic Programmer&lt;/p&gt;</summary><content type="html">&lt;p&gt;While browsing around for books casually today, I found an almost-new copy of "The Pragmatic Programmer" today. Although I was looking for bargains on fiction and non-fiction titles and not necessarily programming and tech books, I found it too hard to pass on the deal. It was a 2013 reprint (lucky!) with ISBN: 978-81-317-2242-9. The paper quality was ok-ish and there weren't any markings left by the previous owner (very lucky!).&lt;/p&gt;
&lt;p&gt;As I got home and read the Foreword and the Preface, I was pleasently surprised. It wasn't a preachy "do-X-for-Efficiency" book that I expected it to be. Instead, it read easy and had a lot of sensible advice even before the main content of the book began! Being the easy read it was and the no-nonsense message it carried, I found the book very hard to put down and got through the material (minus the Appendix) in less than a week :)&lt;/p&gt;
&lt;p&gt;More than a "review", I intend for this note to be a personal refresher or reference card that I can get back to every so often. With that said, here are the most important maxims (IMHO) after the first read of this book (oh, I'm definitely going to read it a few times over and update this notes file as I peel more layers away):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Care About Your Craft&lt;/li&gt;
&lt;li&gt;Provide Options, not excuses&lt;/li&gt;
&lt;li&gt;Don't Live with Broken Windows&lt;/li&gt;
&lt;li&gt;Remember the Big Picture&lt;/li&gt;
&lt;li&gt;Invest Regularly in Your Knowledge Portfolio&lt;/li&gt;
&lt;li&gt;Analyze What You Read and Hear&lt;/li&gt;
&lt;li&gt;Make It Easy to Reuse&lt;/li&gt;
&lt;li&gt;There Are No Final Decisions&lt;/li&gt;
&lt;li&gt;Use Tracer Bullets to Find the Target&lt;/li&gt;
&lt;li&gt;Program Close to the Problem Domain&lt;/li&gt;
&lt;li&gt;Estimate &amp;amp; Iterate the Schedule with the Code&lt;/li&gt;
&lt;li&gt;Keep Knowledge in Plain Text&lt;/li&gt;
&lt;li&gt;Use the Power of Command Shells&lt;/li&gt;
&lt;li&gt;Use a Single Editor Well&lt;/li&gt;
&lt;li&gt;"select" Isn't Broken.&lt;/li&gt;
&lt;li&gt;Don't Assume, Prove It&lt;/li&gt;
&lt;li&gt;Write Code That Writes Code&lt;/li&gt;
&lt;li&gt;You Can't Write Perfect Software&lt;/li&gt;
&lt;li&gt;Put Abstractions in Code, Details in Metadata&lt;/li&gt;
&lt;li&gt;Refactor Early, Refactor Often&lt;/li&gt;
&lt;li&gt;Work with a user to think like a user&lt;/li&gt;
&lt;li&gt;Organize Teams Around Functionality&lt;/li&gt;
&lt;li&gt;Test Early. Test Often. Test Automatically&lt;/li&gt;
&lt;li&gt;Gently Exceed Your Users' Expectations&lt;/li&gt;
&lt;li&gt;Sign Your Work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book was amazing and I only wish I could have found it sooner in my career. All of the advice is generic, seemingly common sense, yet very practical and grounded. I would gladly recommend it it anyone looking at programming and software development as a hobby. This book is right up there with K&amp;amp;R C and the Design of the UNIX Operating System in terms of the impact that it has personally had on me.&lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>gDebugger</title><link href="https://bhargavbhat.me/gdebugger.html" rel="alternate"></link><published>2013-02-16T19:52:00+05:30</published><updated>2013-02-16T19:52:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2013-02-16:/gdebugger.html</id><summary type="html">&lt;p&gt;TIL about gDebugger Tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;Debugging OpenGL/GLES calls is an pretty challenging and there is almost next to nothing for debugging shaders. Today, I came across &lt;a href="http://www.gremedy.com/"&gt;gDebugger&lt;/a&gt; developed by Graphics Remedy that allows programmers to do debug OpenGL/GLES applications in a more traditional way. It also has tools for profiling and measuring performance. Key Features of this tool are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Texture &amp;amp; Buffers viewer : allows you to look at loaded textures and contents of front/back/depth buffers etc&lt;/li&gt;
&lt;li&gt;Break on GL Error : stop code execution on encountering an OpenGL error&lt;/li&gt;
&lt;li&gt;Properties &amp;amp; State View : displays state variables and arguments/properties passed into various &lt;code&gt;gl&lt;/code&gt; Functions&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance Profiling Features, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call Statistics : shows percentage time and number of calls made to &lt;code&gt;gl&lt;/code&gt; Functions&lt;/li&gt;
&lt;li&gt;State Change Stats : shows number of irrelevant/redundant state changes made in the code&lt;/li&gt;
&lt;li&gt;Performance Graphs : shows frame rate &amp;amp; other relevant info like CPU/GPU utilization, mem utilization etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although not exactly as full-fledged and featureful as &lt;code&gt;gdb&lt;/code&gt; or Visual Studio, it is really a big leap forward and the profiling features are pretty helpful. :)&lt;/p&gt;</content><category term="programming"></category><category term="opengl"></category><category term="debugging"></category></entry><entry><title>More Effective C++ &amp; Effective STL : Book Reviews</title><link href="https://bhargavbhat.me/more-effective-c-effective-stl-book-reviews.html" rel="alternate"></link><published>2012-12-22T10:13:00+05:30</published><updated>2012-12-22T10:13:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2012-12-22:/more-effective-c-effective-stl-book-reviews.html</id><summary type="html">&lt;p&gt;My review of the More Effective C++ &amp;amp; Effective STL Books&lt;/p&gt;</summary><content type="html">&lt;p&gt;With more of my day-to-day work moving to C++, I was looking for a nice book to help me get upto speed with C++, best practices and some of the gotchas that C++ is ~famous~ infamous for. This book in particular had rave reviews and was recommended by multiple people, with colleagues, former colleagues and internet strangers all saying very good things about it. I purchased by copy from Sapna Book House about 2 months ago and have been reading it on and off since. I just finished the last topic ("Item 55") a few hours ago.&lt;/p&gt;
&lt;h3&gt;More Effective C++&lt;/h3&gt;
&lt;p&gt;The copy I purchased (online, this time around, those deals are too good to ignore) is a 2002 reprint (ISBN: 978-81-7758-980-1) as a paperback. The paper was mediocre as the pages were pretty flimsy. Unlike the first instalment of the book, this one had major issues with ghosting of highlighted parts.&lt;/p&gt;
&lt;p&gt;As with the first part of the series, this book too is divided into multiple sections and each section has a bunch of topics, and again there were no exercises as such. Of the 35 Items presented, the following were the most appealing/relevant to my circumstances&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 2  : Prefer C++ style casts &lt;/li&gt;
&lt;li&gt;Item 3  : Never treat arrays polymorphically&lt;/li&gt;
&lt;li&gt;Item 5  : Be wary of user conversion functions&lt;/li&gt;
&lt;li&gt;Item 9  : Use destructors to prevent resource leaks&lt;/li&gt;
&lt;li&gt;Item 13 : Catch exceptions by reference&lt;/li&gt;
&lt;li&gt;Item 15 : Understand costs of exception handling&lt;/li&gt;
&lt;li&gt;Item 18 : Amortize the cost of expected computation&lt;/li&gt;
&lt;li&gt;Item 20 : Facilitate return-value optimization (RVO)&lt;/li&gt;
&lt;li&gt;Item 28 : Smart Pointers&lt;/li&gt;
&lt;li&gt;Item 33 : Make non-leaf classes abstract&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Effective STL&lt;/h3&gt;
&lt;p&gt;Was much of the same stuff as the previous two books in this series. This was once again a 2002 reprint (ISBN: 978-81-7758-908-5) paperback. Paper quality was better than More Effective C++ but I did encounter slight ghosting of highlights. While most of the content in Effective STL was virtually new to me, I found these items the most helpful, out of the total 50 presented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 3  : Make copying cheap &amp;amp; correct for containers&lt;/li&gt;
&lt;li&gt;Item 6  : Be alert for C++'s most vexing parse &lt;/li&gt;
&lt;li&gt;Item 8  : Never create containers of &lt;code&gt;auto_ptr&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Item 9  : Choose carefully among erasing options&lt;/li&gt;
&lt;li&gt;Item 13 : Prefer &lt;code&gt;vector&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; to dynamically allocated arrays&lt;/li&gt;
&lt;li&gt;Item 14 : Use &lt;code&gt;reserve&lt;/code&gt; to avoid unnecessary reallocations&lt;/li&gt;
&lt;li&gt;Item 18 : Avoid using &lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 19 : Understand differences between &lt;code&gt;equality&lt;/code&gt; and &lt;code&gt;equivalence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 24 : Choose carefully between &lt;code&gt;map::operator[]&lt;/code&gt; and &lt;code&gt;map::insert&lt;/code&gt; when efficiency is important&lt;/li&gt;
&lt;li&gt;Item 27 : Use &lt;code&gt;distance&lt;/code&gt; and &lt;code&gt;advance&lt;/code&gt; to convert &lt;code&gt;const_iterator&lt;/code&gt;s to &lt;code&gt;iterator&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Item 32 : Follow &lt;code&gt;remove&lt;/code&gt;-like algorithms by &lt;code&gt;erase&lt;/code&gt; if you really want to remove something&lt;/li&gt;
&lt;li&gt;Item 36 : Understand the proper implementation of &lt;code&gt;copy_if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 41 : Understand the reasons for &lt;code&gt;ptr_fun&lt;/code&gt;, &lt;code&gt;mem_fun&lt;/code&gt; and &lt;code&gt;mem_fun_ref&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Item 49 : Learn to decipher STL-related compiler diagonostics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I'd consider that both books lived up to the hype surrounding them and the first installment in the series. Unlike the first part, these were focused a lot more on techniques and features beyond the basics. Between the two, More Effective C++ was a bit of heavy/intensive read esp. towards the end.  &lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>vim Macro Cheatsheet</title><link href="https://bhargavbhat.me/vim-macro-cheatsheet.html" rel="alternate"></link><published>2012-08-25T17:33:00+05:30</published><updated>2012-08-25T17:33:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2012-08-25:/vim-macro-cheatsheet.html</id><summary type="html">&lt;p&gt;Macro Cheatsheet for vim&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is a suppliment to the earlier vim sesssions and was shared as an email to an internal team group&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Macros Recap&lt;/h4&gt;
&lt;h4&gt;Macro Recording &amp;amp; Playback&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Ensure you're in &lt;em&gt;NORMAL&lt;/em&gt; mode and then hit the &lt;code&gt;q&lt;/code&gt; key to start macro recording&lt;/li&gt;
&lt;li&gt;Next, Press a letter key &lt;code&gt;a-z&lt;/code&gt;, the macro you're recording will be saved in this register (or "slot")&lt;/li&gt;
&lt;li&gt;Perform editing operation as desired, all of this is being recorded into the macro. Press &lt;code&gt;q&lt;/code&gt; again to stop recording&lt;/li&gt;
&lt;li&gt;Replay the recorded macro by hitting the &lt;code&gt;@&lt;/code&gt; key followed by the letter from step #2.&lt;/li&gt;
&lt;li&gt;Macros can be composed like normal commands &lt;code&gt;10@a&lt;/code&gt; will replay the macro in register &lt;code&gt;a&lt;/code&gt; 10 times.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@@&lt;/code&gt; is handy to repeat the last macro (think &lt;code&gt;.&lt;/code&gt; for the &lt;em&gt;WHOLE&lt;/em&gt; macro. &lt;code&gt;.&lt;/code&gt; will only repeat the last command in the macro)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Saving Macros across Sessions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;vim automatically saves upto 50 lines of commands in each of the macro registers and restores them on editor restart&lt;/li&gt;
&lt;li&gt;users can explicitly set register contents via &lt;code&gt;vimrc&lt;/code&gt; or the &lt;code&gt;^R^R&lt;/code&gt; command &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ref: &lt;code&gt;https://vim.fandom.com/wiki/Macros#Saving_a_macro&lt;/code&gt; for more details&lt;/p&gt;
&lt;h4&gt;Dumping &amp;amp; Debugging Macros&lt;/h4&gt;
&lt;p&gt;vim macros cannot be debugged step-by-step (atleast as far as I'm aware) like debugging code with &lt;code&gt;gdb&lt;/code&gt;. Here are a few handy pointers for checking macros and correcting any mistakes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:reg x&lt;/code&gt; will print the contents of the register &lt;code&gt;x&lt;/code&gt;, assuming macro was recorded here, it will display the recorded commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"xp&lt;/code&gt; will "paste" the contents of register &lt;code&gt;x&lt;/code&gt;, assuming macro was recorded here, you can have the contents pasted into the current buffer ("open file")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"xyy&lt;/code&gt; will "replace" the contents of register &lt;code&gt;x&lt;/code&gt; with the line selected from the current buffer. This can be used to correct commands recorded wrongly in the macro&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Notes/Links&lt;/h4&gt;
&lt;p&gt;Following are useful links for working with vim macros&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://vim.fandom.com/wiki/Macros
https://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/
https://blog.sanctum.geek.nz/advanced-vim-macros/
https://math.berkeley.edu/~gbergman/misc/hacks/vi.html
https://unix.stackexchange.com/questions/17571/vim-markers-and-macros
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tools"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>Intro to vim - Session 1 Notes</title><link href="https://bhargavbhat.me/intro-to-vim-session-1-notes.html" rel="alternate"></link><published>2012-08-15T09:17:00+05:30</published><updated>2012-08-15T09:17:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2012-08-15:/intro-to-vim-session-1-notes.html</id><summary type="html">&lt;p&gt;Notes from 1st Session of introduction to vim&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is a collection of notes and paraphrasing of Q&amp;amp;A from the 3 sessions of approx 45mins each. These sessions covered the basics of vim, presented over the last few weeks to team members and other interested colleagues. The focus of these sessions was more on improving day to day work efficiency with vim&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;vim is an open-source, multi-platform text editor with various advanced features. The main selling point of vim is that once you've learnt the editor and its various modes, options and commands, you can use it to process all kinds of text files, not just code &amp;amp; configuration. Many people use vim to write/edit email and documents also. vim is extensible and can be configured to help with text editing tasks of all sorts of things. eg: documentation in markdown (with shortcut for previewing in browser), plugin for plantUML previews and similar.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;vim can be installed via PeaCy on Windows or with &lt;code&gt;apt-get&lt;/code&gt; on Ubuntu. The low-foot print simulator images and build servers have &lt;code&gt;vi&lt;/code&gt; which is a lesser featured cousin of vim already for quick editing tasks such as tweaking config files and such.&lt;/p&gt;
&lt;h4&gt;Customization&lt;/h4&gt;
&lt;p&gt;vim can be customized via the &lt;code&gt;vimrc&lt;/code&gt; file, which determines the behaviour of the editor, the syntax highlighting and plugins available as well as general features such as keyboard-shortcuts (which vim names as keybindings). vim is extermely customizable and it wouldn't be possible to cover all the options and settings available in this session. Refer to links below for a sample vimrc which will serve as a good starting point as well as suggestions for customizing the editor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://vim.fandom.com/wiki/Example_vimrc
https://nvie.com/posts/how-i-boosted-my-vim/
https://developer.ibm.com/tutorials/au-customize_vi/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; We will revisit customization in later sessions, so for now, this section can be skimmed to get an idea of the vast options available for adjusting the behaviour of the editor itself&lt;/p&gt;
&lt;h4&gt;Differences &amp;amp; Key Concepts&lt;/h4&gt;
&lt;p&gt;vim feels a little different from most other editors such as say &lt;code&gt;Notepad++&lt;/code&gt; or &lt;code&gt;nano&lt;/code&gt; due to the different philosophy that vim employs to deal with editing. Below are the key points of the vim philosophy, as per my understanding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Modality&lt;/em&gt; - Separates editing/reading (&lt;em&gt;NORMAL&lt;/em&gt; mode) text from inputing/writing text (&lt;em&gt;INSERT&lt;/em&gt; mode). This allows effectively supercharges the two below principles.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Orthogonality&lt;/em&gt; - Separates the notion of movement/selection from actions/changes. This allows the user to determine the region or items to change independent of the change itself&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Composability&lt;/em&gt; - Allows "building" up of changes from primitives that the user is already familiar with, these can further be built into macros for effective processing of repeitive tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, this is a personal view/opinion and various people would have a different view on these aspects.&lt;/p&gt;
&lt;h4&gt;Basic Commands&lt;/h4&gt;
&lt;p&gt;Keeping with the philosophy of Orthogonality &amp;amp; Composability, vim commands can be divided into two groups as below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Movements&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; start of line&lt;/td&gt;
&lt;td&gt;&lt;code&gt;d&lt;/code&gt; delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt; end of line&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt; change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt; next word&lt;/td&gt;
&lt;td&gt;&lt;code&gt;y&lt;/code&gt; yank (remember as cop&lt;em&gt;y&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt; previous word&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt; repeat prev action&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These commands can then be combined to express the editing the user wants to perform. Eg: &lt;code&gt;d$&lt;/code&gt; will delete the current line (compare this with say Notepad++, where user needs to select the entire line with mouse and hit delete/backspace). A lot of the power of vim comes from these commands. Please refer to the links below that go into a lot more detail on vim commands (basic and intermediate):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://vim.fandom.com/wiki/Tutorial
https://www.linux.com/training-tutorials/vim-101-beginners-guide-vim/
https://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier/1278813
https://thoughtbot.com/upcase/vim
https://code.tutsplus.com/articles/25-vim-tutorials-screencasts-and-resources--net-14631
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We would cover language specific features and advanced concepts such as macros in the upcoming sessions, as well as how it applies specifically to the day to day tasks that we spend a lot of time on:
- rationalizing logs from devices/field
- narrowing down relevant parts of the logs with custom folds
- macros to "boil down" log file and list out relevant/interesting lines from point of view of reproducing the bug and/or capturing state&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Migration Notes:&lt;/em&gt; Q&amp;amp;A Part not captured as I couldn't find those paper notes, the original post had a &lt;code&gt;TODO&lt;/code&gt; with typing out Q&amp;amp;A questions into blogger post. Sessions 2 &amp;amp; 3 were focussed on practical examples relevant to the team that I was then a part of and therefore have not been migrated.&lt;/p&gt;</content><category term="tools"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>Books To Read</title><link href="https://bhargavbhat.me/books-to-read.html" rel="alternate"></link><published>2012-03-31T12:12:00+05:30</published><updated>2012-03-31T12:12:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2012-03-31:/books-to-read.html</id><summary type="html">&lt;p&gt;My list of Books to Read&lt;/p&gt;</summary><content type="html">&lt;p&gt;After reading the Effective C++ book from Scott Meyers last year, I wanted to build a list of programming books, focused on C, C++ and UNIX/Linux that I wanted to read. This is that list in no particular order:&lt;/p&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] Mythical Man Month&lt;/li&gt;
&lt;li&gt;[x] Code Complete&lt;/li&gt;
&lt;li&gt;[ ] Clean Coder&lt;/li&gt;
&lt;li&gt;[ ] Pragmatic Programmer&lt;/li&gt;
&lt;li&gt;[ ] Design Patterns (GoF book)&lt;/li&gt;
&lt;li&gt;[ ] Designing Object Oriented Software&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C/C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] K&amp;amp;C C&lt;/li&gt;
&lt;li&gt;[x] C++ Programming Language&lt;/li&gt;
&lt;li&gt;[x] Effective C++&lt;/li&gt;
&lt;li&gt;[ ] More Effective C++&lt;/li&gt;
&lt;li&gt;[ ] Effective STL&lt;/li&gt;
&lt;li&gt;[ ] C++ Standard Template Library&lt;/li&gt;
&lt;li&gt;[ ] Algorithms in C++&lt;/li&gt;
&lt;li&gt;[ ] C++ FAQs&lt;/li&gt;
&lt;li&gt;[ ] Exceptional C++&lt;/li&gt;
&lt;li&gt;[ ] More Exceptional C++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UNIX/Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] The Design of the UNIX Operating System&lt;/li&gt;
&lt;li&gt;[ ] Linux Kernel Development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Scheme Programming Language&lt;/li&gt;
&lt;li&gt;[ ] Structure &amp;amp; Interpretation of Computer Programs&lt;/li&gt;
&lt;li&gt;[ ] Introduction to Algorithms &lt;/li&gt;
&lt;li&gt;[ ] Learning DCOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't intend to review or write about all of these books, maybe a few that I found the most impactful personally.&lt;/p&gt;</content><category term="programming"></category><category term="book-review"></category></entry><entry><title>Effective C++ : A Book Review</title><link href="https://bhargavbhat.me/effective-c-a-book-review.html" rel="alternate"></link><published>2011-12-17T18:03:00+05:30</published><updated>2011-12-17T18:03:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2011-12-17:/effective-c-a-book-review.html</id><summary type="html">&lt;p&gt;My review of the Effective C++ book&lt;/p&gt;</summary><content type="html">&lt;p&gt;With more of my day-to-day work moving to C++, I was looking for a nice book to help me get upto speed with C++, best practices and some of the gotchas that C++ is ~famous~ infamous for. This book in particular had rave reviews and was recommended by multiple people, with colleagues, former colleagues and internet strangers all saying very good things about it. I purchased by copy from Sapna Book House about 2 months ago and have been reading it on and off since. I just finished the last topic ("Item 55") a few hours ago.&lt;/p&gt;
&lt;p&gt;The copy I have with me is a 2008 reprint of the 3rd edition of this book (ISBN: 978-81-317-1480-5). The book is a paperback, printed paper is of good quality and highlighting does not ghost or show thru. No complaints on the paper or binding quality. The book has held up well.&lt;/p&gt;
&lt;p&gt;With regard to content, the book is divided into multiple sections and each section has a bunch of topics. Discussion is presented as an ordered list of "Item"s. 
This makes it very easy to pause and take a break between topics and get back to the book right after what you'd already read. 
Unfortunately, there weren't any exercises apart from a few teasers before gotchas that served as prompts for the reader to think things through and form a view before the "big reveal" of the gotcha and an explaination of why the compiler/language behaved the way it did. This was a deviation from perhaps some of the "textbook" style books that I had read so far, including K&amp;amp;R, which had really great compliment of thought provoking exercises.&lt;/p&gt;
&lt;p&gt;Of the 55 Items presented, the following were the most relevant to me, someone who was "migrating" to C++ from C:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 2  : Prefer &lt;code&gt;const&lt;/code&gt;s, &lt;code&gt;enum&lt;/code&gt;s and &lt;code&gt;inline&lt;/code&gt;s to &lt;code&gt;#define&lt;/code&gt;s &lt;/li&gt;
&lt;li&gt;Item 5  : Know what functions C++ silently writes and calls&lt;/li&gt;
&lt;li&gt;Item 8  : Prevent exceptions from leaving destructors&lt;/li&gt;
&lt;li&gt;Item 9  : Never call virtual fucntions during construction and destruction&lt;/li&gt;
&lt;li&gt;Item 14 : Think carefully about copying behaviour in resource managing classes&lt;/li&gt;
&lt;li&gt;Item 19 : Treat class design as type design&lt;/li&gt;
&lt;li&gt;Item 26 : Postpone variable definitions&lt;/li&gt;
&lt;li&gt;Item 27 : Minimize Casting&lt;/li&gt;
&lt;li&gt;Item 32 : Make sure public inheritance models "is-a"&lt;/li&gt;
&lt;li&gt;Item 41 : Understand implicit interfaces and compile-time polymorphism&lt;/li&gt;
&lt;li&gt;Item 48 : Be aware of template metaprogramming&lt;/li&gt;
&lt;li&gt;Item 54 : Familiarize yourself with the standard library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The items were relatively independent that I could jump around the book and cover them in this order, having to refer back to other sections and items occasionally. This lent the book being a very easy read, although some of the material presented was a little tricky and I had to try a couple of short programs on my own to really "get" the material.&lt;/p&gt;
&lt;p&gt;Overall, I'd say the book lived up to the excellent reviews and positive feedback from colleagues and I would gladly recommend it to someone in my shoes :). I would definitely consider reading more books from Scott Meyers. viz. : More Effective C++ and Effective STL which I understand are presented in a similar format and cover much of the same material. &lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>The Hashes</title><link href="https://bhargavbhat.me/the-hashes.html" rel="alternate"></link><published>2011-10-08T13:22:00+05:30</published><updated>2011-10-08T13:22:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2011-10-08:/the-hashes.html</id><summary type="html">&lt;p&gt;TIL about the # (Stringizing) and ## (Concatenation) operators of the Pre-processor&lt;/p&gt;</summary><content type="html">&lt;p&gt;I ran into a seemingly straight forward problem earlier this week: treat a particular &lt;code&gt;#define&lt;/code&gt; value as either string or int, depending on the context where it is used. A naive solution to is repeating the &lt;code&gt;#define&lt;/code&gt; twice, once as a string and then as a integer:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define SOME_VALUE_INT 42&lt;/span&gt;
&lt;span class="cp"&gt;#define SOME_VALUE_STR &amp;quot;42&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;... and using the right value depending on the context. Not only is this naive method a violation of DRY, but it is also very crude and inelegant. Having multiple such &lt;code&gt;#define&lt;/code&gt;ed constants are a maintainance disaster waiting to happen. My search for a better way to deal with this lead me to a very relevant &lt;a href="https://stackoverflow.com/questions/2653214/stringification-of-a-macro-value"&gt;question&lt;/a&gt; on SO and down I went the rabbit hole that is the the C Pre-processor. This is a summary of my learning and notes for my future self.&lt;/p&gt;
&lt;h3&gt;The Stringizing Operator : &lt;code&gt;#&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves the problem above rather elegantly, as described the accepted answer to in the SO question above:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define xstr(a) str(a)&lt;/span&gt;
&lt;span class="cp"&gt;#define str(a) #a&lt;/span&gt;

&lt;span class="cp"&gt;#define RECORDS_PER_PAGE 10&lt;/span&gt;

&lt;span class="cp"&gt;#define REQUEST_RECORDS \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;SELECT Fields FROM Table WHERE Conditions&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; OFFSET %d * &amp;quot; xstr(RECORDS_PER_PAGE) \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; LIMIT &amp;quot; xstr(RECORDS_PER_PAGE) &amp;quot;;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows the preprocessor to replace anything prefixed with a &lt;code&gt;#&lt;/code&gt; with the literal text of the actual argument. The argument is not macro-expanded.&lt;/li&gt;
&lt;li&gt;leading &amp;amp; trailing whitespace is ignored. Whitespaces in the middle of the text converted to a single space&lt;/li&gt;
&lt;li&gt;to stringize the result of expansion of a macro argument, you have to use two levels of macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Concatenation Operator : &lt;code&gt;##&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves a somewhate related problem of merging or combining two macro values into a single string. The &lt;code&gt;##&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;performs token pasting : two tokens on either side of ‘##’ operator are combined into a single token. The the actual arguments are not macro-expanded.&lt;/li&gt;
&lt;li&gt;cannot create a comment by concatenating ‘/’ and ‘*’.&lt;/li&gt;
&lt;li&gt;comments in arguments that will be concatenated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While these operators present interesting possibilities, using them for all but the most basic and straight forward needs would be difficult. Although handy in a few situations, they are qutie limited and come with a bunch of caveats. However, there still are a few corner cases where they do make lives of programmers a lot simpler.&lt;/p&gt;</content><category term="programming"></category><category term="c"></category><category term="preprocessor"></category><category term="til"></category></entry><entry><title>No strtoul in C#</title><link href="https://bhargavbhat.me/no-strtoul-in-c.html" rel="alternate"></link><published>2011-05-26T08:41:00+05:30</published><updated>2011-05-26T08:41:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2011-05-26:/no-strtoul-in-c.html</id><summary type="html">&lt;p&gt;TIL about the lack of a clean &lt;code&gt;strtoul&lt;/code&gt; library function in C# that can infer base of the input string&lt;/p&gt;</summary><content type="html">&lt;p&gt;Off late, I've been supporting a legacy C#/WinForms application written to configure the look-and-feel of a OpenGL/GLES based 3D rendering engine, which itself is written in C++. While the rendering engine and learning OpenGL itself remains my primary focus, this problem with C# was rather interesting. &lt;/p&gt;
&lt;h3&gt;C++ and &lt;code&gt;strtoul&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.cplusplus.com/reference/cstdlib/strtoul/"&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/a&gt; library function in C++ is very very useful for dealing with numbers in multiple bases and converting between them. When the &lt;code&gt;radix&lt;/code&gt; (aka &lt;code&gt;base&lt;/code&gt;) parameter is passed in as &lt;code&gt;0&lt;/code&gt;, this function determines the input base automatically and returns the result in base-10. Therefore, the below line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strtoul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0xa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;... will set &lt;code&gt;x&lt;/code&gt; to the value &lt;code&gt;10&lt;/code&gt; (since hex &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt; decimal) The problem at hand required a similar library function in C#.&lt;/p&gt;
&lt;h3&gt;The Search and The Solution&lt;/h3&gt;
&lt;p&gt;MS &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.convert.touint32"&gt;ToUInt32&lt;/a&gt; docs don't really have much to say on this topic, they're mostly concerned with converting between &lt;code&gt;float&lt;/code&gt;s and integers rather than integers of different bases. Not finding what I need in MS docs or elsewhere, I posted a question on &lt;a href="https://stackoverflow.com/questions/6080065/strtoul-equivalent-in-c-sharp"&gt;StackOverflow&lt;/a&gt; and the following solution was suggested:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToUInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;While not as elegant as the C++ way, this will do for now. Just before I wrote this note and shared with everyone, an unlikely alternative was found by a colleague in the discussion posted &lt;a href="https://bytes.com/topic/c-sharp/answers/226729-easy-hex-string-0x1234-integer-conversion"&gt;here&lt;/a&gt;. However, I'm yet to try this out and I do not fully understand the implications of passing in the &lt;code&gt;NumberStyles&lt;/code&gt; enum and the kind of numbers it might end up picking up as valid. On the surface, I don't see anything obviously wrong/off here.&lt;/p&gt;</content><category term="programming"></category><category term="csharp"></category><category term="til"></category></entry><entry><title>gdb Useful Commands</title><link href="https://bhargavbhat.me/gdb-useful-commands.html" rel="alternate"></link><published>2010-12-18T12:26:00+05:30</published><updated>2010-12-18T12:26:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:bhargavbhat.me,2010-12-18:/gdb-useful-commands.html</id><summary type="html">&lt;p&gt;Listing of Useful gdb Commands&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a list of very useful gdb commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Debugging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From command prompt: &lt;code&gt;gdb prog.out&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;From command prompt with args: &lt;code&gt;gdb --args prog.out &amp;lt;arg1&amp;gt; &amp;lt;arg2&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Attach to process: &lt;code&gt;gdb&lt;/code&gt; and then &lt;code&gt;attach &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;From coredumps: &lt;code&gt;gdb prog.out -c &amp;lt;dumpfile&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breakpoints&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Break at function : &lt;code&gt;break &amp;lt;func_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Break at line : &lt;code&gt;break &amp;lt;line_num&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Break at source file &amp;amp; line : &lt;code&gt;break &amp;lt;src_file&amp;gt;.c &amp;lt;line_num&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Show Breakpoints : &lt;code&gt;info breakpoints&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove Particular breakpoint : &lt;code&gt;delete &amp;lt;index&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Toggle breakpoints : &lt;code&gt;enable &amp;lt;index&amp;gt;&lt;/code&gt; or &lt;code&gt;disable &amp;lt;index&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove all breakpoints: &lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove breakpoints in func : &lt;code&gt;clear &amp;lt;func_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove brekapoints at line : &lt;code&gt;clear &amp;lt;line_num&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running/Stepping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start execution : &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Continue execution :  &lt;code&gt;cont&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Line by line execution :  &lt;code&gt;step&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; (will step-into functions)&lt;/li&gt;
&lt;li&gt;Line by line execution : &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt; (will step-over functions)&lt;/li&gt;
&lt;li&gt;Run next few lines : &lt;code&gt;next &amp;lt;count&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop program : &lt;code&gt;kill&lt;/code&gt; or &lt;code&gt;^C&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Callstack &amp;amp; State&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View stack trace : &lt;code&gt;backtrace&lt;/code&gt; or &lt;code&gt;bt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View current state : &lt;code&gt;frame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View local variables : &lt;code&gt;info locals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View CLI args : &lt;code&gt;info args&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View Global and Static vars : &lt;code&gt;info variables&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View variable : &lt;code&gt;print &amp;lt;var_name&amp;gt;&lt;/code&gt; (&lt;code&gt;print/x&lt;/code&gt; to view as hex)&lt;/li&gt;
&lt;li&gt;View arrays : &lt;code&gt;print &amp;lt;arr&amp;gt;[&amp;lt;idx&amp;gt;]&lt;/code&gt; or &lt;code&gt;print *&amp;lt;arr&amp;gt;@&amp;lt;size&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View Source&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View code around current point : &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View code around line : &lt;code&gt;list &amp;lt;line&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View code in func : &lt;code&gt;list &amp;lt;file&amp;gt;:&amp;lt;func&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Notes/Links&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://beej.us/guide/bggdb/
https://linux.die.net/man/1/gdb
https://web.mit.edu/gnu/doc/html/gdb_toc.html
https://courses.cs.washington.edu/courses/cse378/97au/help/gdb-intro.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="debugging"></category><category term="gdb"></category></entry></feed>