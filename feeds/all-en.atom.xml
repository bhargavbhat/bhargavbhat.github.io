<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bhargav's Homepage</title><link href="/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2021-11-01T14:31:00+05:30</updated><entry><title>Moving to Pelican &amp; Reclaiming Old Writing</title><link href="/moving-to-pelican-reclaiming-old-writing.html" rel="alternate"></link><published>2021-11-01T14:31:00+05:30</published><updated>2021-11-01T14:31:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2021-11-01:/moving-to-pelican-reclaiming-old-writing.html</id><summary type="html">&lt;p&gt;Moving to Pelican and Reclaiming Old writing across notes, text files, emails and shared docs&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is just a summary of me doing a Deepawali cleaning of all of my notes, old emails, text files and Google Drive stuff and moving it all under a managable blog hosted on GitHub pages with &lt;a href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Installation &amp;amp; Theme Selection&lt;/h4&gt;
&lt;p&gt;Pelican install was very quick and straight forward process, just follow the instructions laid out in the "quickstart" section of the docs and a fully functional, ready to serve blog was ready on my local machine. This also allowed me to try out a few themes, verify formatting (most of the posts I have were written a email, text files or shared docs, not markdown) and ensure that everything looked fine.&lt;/p&gt;
&lt;p&gt;Theme selection was a slighly longer task, mostly consisted of &lt;a href="http://www.pelicanthemes.com/"&gt;browsing&lt;/a&gt; available options, trawling the respective github repos and picking one that clicked visually and feature-wise. Then came the testing phase of trying it on the articles and pages that I had migrated/created so far. My main criteria for theme selection were a clean design, pleasing colours, tags &amp;amp; categories support along with a search function. Although I couldn't find one that checked all the boxes, I found that &lt;a href="https://github.com/laughk/pelican-hss"&gt;pelican-hss&lt;/a&gt; had all that I wanted (save the search function). I picked that theme, made a few tweaks to the supplied pygments CSS and &lt;code&gt;base.html&lt;/code&gt; template and decided to call it a day.&lt;/p&gt;
&lt;h4&gt;Deployment to Github Pages&lt;/h4&gt;
&lt;p&gt;My previous homepage was a rather simple landing page, with links to social media profiles:
&lt;img alt="Previous Homepage" src="/images/home_page.png"&gt;&lt;/p&gt;
&lt;p&gt;and this was served out of github pages as a simple &lt;code&gt;index.html&lt;/code&gt; file, forked from the html5up repo. Moving to pelican meant setting up branches slightly differently. I chose to use the &lt;code&gt;content&lt;/code&gt; branch to contain all of the Pelican stuff.&lt;/p&gt;
&lt;h4&gt;Learning&lt;/h4&gt;
&lt;p&gt;The real power, flexibility &amp;amp; convenience of static hosting is apparent from all of the personal blogs and project pages hosted on GH pages. For me, a lot of the learning was around pelican,setting up venv right and migrating content&lt;/p&gt;
&lt;h4&gt;Road Ahead&lt;/h4&gt;
&lt;p&gt;A lot of my old notes, shared docs and learning are still scattered all over platforms. Although not too many public/shared posts and notes exist, I still have to sift through them all, deal with dead links and filter out stuff that's relevant and applicable to a wider audience. Most of the notes that I have are specific to the particular teams, products or siutations. I've gotten thru a few of these notes and will continue to add them to the site as fast as I can. As I make my way around this old stuff, a lot more posts should start popping up on the homepage. &lt;/p&gt;
&lt;p&gt;PS: Dates and stuff for these old posts is from file meta data, may not be 100% accurate. Stuff that was once WIP has likely been abandoned and/or is no longer relevant. Links have been updated and dead links removed (where applicable). If you find something odd or inaccurate, please do reach out. :)&lt;/p&gt;</content><category term="meta"></category></entry><entry><title>Intro to vim - Session 1 Notes</title><link href="/intro-to-vim-session-1-notes.html" rel="alternate"></link><published>2012-08-15T09:17:00+05:30</published><updated>2012-08-15T09:17:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2012-08-15:/intro-to-vim-session-1-notes.html</id><summary type="html">&lt;p&gt;Notes from 1st Session of introduction to vim&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is a collection of notes and paraphrasing of Q&amp;amp;A from the 3 sessions of approx 45mins each. These sessions covered the basics of vim, presented over the last few weeks to team members and other interested colleagues. The focus of these sessions was more on improving day to day work efficiency with vim&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;vim is an open-source, multi-platform text editor with various advanced features. The main selling point of vim is that once you've learnt the editor and its various modes, options and commands, you can use it to process all kinds of text files, not just code &amp;amp; configuration. Many people use vim to write/edit email and documents also. vim is extensible and can be configured to help with text editing tasks of all sorts of things. eg: documentation in markdown (with shortcut for previewing in browser), plugin for plantUML previews and similar.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;vim can be installed via PeaCy on Windows or with &lt;code&gt;apt-get&lt;/code&gt; on Ubuntu. The low-foot print simulator images and build servers have &lt;code&gt;vi&lt;/code&gt; which is a lesser featured cousin of vim already for quick editing tasks such as tweaking config files and such.&lt;/p&gt;
&lt;h4&gt;Customization&lt;/h4&gt;
&lt;p&gt;vim can be customized via the &lt;code&gt;vimrc&lt;/code&gt; file, which determines the behaviour of the editor, the syntax highlighting and plugins available as well as general features such as keyboard-shortcuts (which vim names as keybindings). vim is extermely customizable and it wouldn't be possible to cover all the options and settings available in this session. Refer to links below for a sample vimrc which will serve as a good starting point as well as suggestions for customizing the editor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://vim.fandom.com/wiki/Example_vimrc
https://nvie.com/posts/how-i-boosted-my-vim/
https://developer.ibm.com/tutorials/au-customize_vi/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; We will revisit customization in later sessions, so for now, this section can be skimmed to get an idea of the vast options available for adjusting the behaviour of the editor itself&lt;/p&gt;
&lt;h4&gt;Differences &amp;amp; Key Concepts&lt;/h4&gt;
&lt;p&gt;vim feels a little different from most other editors such as say &lt;code&gt;Notepad++&lt;/code&gt; or &lt;code&gt;nano&lt;/code&gt; due to the different philosophy that vim employs to deal with editing. Below are the key points of the vim philosophy, as per my understanding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Modality&lt;/em&gt; - Separates editing/reading (&lt;em&gt;NORMAL&lt;/em&gt; mode) text from inputing/writing text (&lt;em&gt;INSERT&lt;/em&gt; mode). This allows effectively supercharges the two below principles.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Orthogonality&lt;/em&gt; - Separates the notion of movement/selection from actions/changes. This allows the user to determine the region or items to change independent of the change itself&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Composability&lt;/em&gt; - Allows "building" up of changes from primitives that the user is already familiar with, these can further be built into macros for effective processing of repeitive tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, this is a personal view/opinion and various people would have a different view on these aspects.&lt;/p&gt;
&lt;h4&gt;Basic Commands&lt;/h4&gt;
&lt;p&gt;Keeping with the philosophy of Orthogonality &amp;amp; Composability, vim commands can be divided into two groups as below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Movements&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; start of line&lt;/td&gt;
&lt;td&gt;&lt;code&gt;d&lt;/code&gt; delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt; end of line&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt; change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt; next word&lt;/td&gt;
&lt;td&gt;&lt;code&gt;y&lt;/code&gt; yank (remember as cop&lt;em&gt;y&lt;/em&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt; previous word&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt; repeat prev action&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These commands can then be combined to express the editing the user wants to perform. Eg: &lt;code&gt;d$&lt;/code&gt; will delete the current line (compare this with say Notepad++, where user needs to select the entire line with mouse and hit delete/backspace). A lot of the power of vim comes from these commands. Please refer to the links below that go into a lot more detail on vim commands (basic and intermediate):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://vim.fandom.com/wiki/Tutorial
https://www.linux.com/training-tutorials/vim-101-beginners-guide-vim/
https://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier/1278813
https://thoughtbot.com/upcase/vim
https://code.tutsplus.com/articles/25-vim-tutorials-screencasts-and-resources--net-14631
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We would cover language specific features and advanced concepts such as macros in the upcoming sessions, as well as how it applies specifically to the day to day tasks that we spend a lot of time on:
- rationalizing logs from devices/field
- narrowing down relevant parts of the logs with custom folds
- macros to "boil down" log file and list out relevant/interesting lines from point of view of reproducing the bug and/or capturing state&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Migration Notes:&lt;/em&gt; Q&amp;amp;A Part not captured as I couldn't find those paper notes, the original post had a &lt;code&gt;TODO&lt;/code&gt; with typing out Q&amp;amp;A questions into blogger post. Sessions 2 &amp;amp; 3 were focussed on practical examples relevant to the team that I was then a part of and therefore have not been migrated.&lt;/p&gt;</content><category term="misc"></category><category term="vim"></category><category term="editor"></category></entry><entry><title>Books To Read</title><link href="/books-to-read.html" rel="alternate"></link><published>2012-03-31T12:12:00+05:30</published><updated>2012-03-31T12:12:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2012-03-31:/books-to-read.html</id><summary type="html">&lt;p&gt;My list of Books to Read&lt;/p&gt;</summary><content type="html">&lt;p&gt;After reading the Effective C++ book from Scott Meyers last year, I wanted to build a list of programming books, focused on C, C++ and UNIX/Linux that I wanted to read. This is that list in no particular order:&lt;/p&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] Mythical Man Month&lt;/li&gt;
&lt;li&gt;[x] Code Complete&lt;/li&gt;
&lt;li&gt;[ ] Clean Coder&lt;/li&gt;
&lt;li&gt;[ ] Pragmatic Programmer&lt;/li&gt;
&lt;li&gt;[ ] Design Patterns (GoF book)&lt;/li&gt;
&lt;li&gt;[ ] Designing Object Oriented Software&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C/C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[x] K&amp;amp;C C&lt;/li&gt;
&lt;li&gt;[x] C++ Programming Language&lt;/li&gt;
&lt;li&gt;[x] Effective C++&lt;/li&gt;
&lt;li&gt;[ ] More Effective C++&lt;/li&gt;
&lt;li&gt;[ ] Effective STL&lt;/li&gt;
&lt;li&gt;[ ] C++ Standard Template Library&lt;/li&gt;
&lt;li&gt;[ ] Algorithms in C++&lt;/li&gt;
&lt;li&gt;[ ] C++ FAQs&lt;/li&gt;
&lt;li&gt;[ ] Exceptional C++&lt;/li&gt;
&lt;li&gt;[ ] More Exceptional C++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UNIX/Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] The Design of the UNIX Operating System&lt;/li&gt;
&lt;li&gt;[ ] Linux Kernel Development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Scheme Programming Language&lt;/li&gt;
&lt;li&gt;[ ] Structure &amp;amp; Interpretation of Computer Programs&lt;/li&gt;
&lt;li&gt;[ ] Introduction to Algorithms &lt;/li&gt;
&lt;li&gt;[ ] Learning DCOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't intend to review or write about all of these books, maybe a few that I found the most impactful personally.&lt;/p&gt;</content><category term="programming"></category><category term="book-review"></category></entry><entry><title>Effective C++ : A Book Review</title><link href="/effective-c-a-book-review.html" rel="alternate"></link><published>2011-12-17T18:03:00+05:30</published><updated>2011-12-17T18:03:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2011-12-17:/effective-c-a-book-review.html</id><summary type="html">&lt;p&gt;My review of the Effective C++ book&lt;/p&gt;</summary><content type="html">&lt;p&gt;With more of my day-to-day work moving to C++, I was looking for a nice book to help me get upto speed with C++, best practices and some of the gotchas that C++ is ~famous~ infamous for. This book in particular had rave reviews and was recommended by multiple people, with colleagues, former colleagues and internet strangers all saying very good things about it. I purchased by copy from Sapna Book House about 2 months ago and have been reading it on and off since. I just finished the last topic ("Item 55") a few hours ago.&lt;/p&gt;
&lt;p&gt;The copy I have with me is a 2008 reprint of the 3rd edition of this book (ISBN: 978-81-317-1480-5). The book is a paperback, printed paper is of good quality and highlighting does not ghost or show thru. No complaints on the paper or binding quality. The book has held up well.&lt;/p&gt;
&lt;p&gt;With regard to content, the book is divided into multiple sections and each section has a bunch of topics. Discussion is presented as an ordered list of "Item"s. 
This makes it very easy to pause and take a break between topics and get back to the book right after what you'd already read. 
Unfortunately, there weren't any exercises apart from a few teasers before gotchas that served as prompts for the reader to think things through and form a view before the "big reveal" of the gotcha and an explaination of why the compiler/language behaved the way it did. This was a deviation from perhaps some of the "textbook" style books that I had read so far, including K&amp;amp;R, which had really great compliment of thought provoking exercises.&lt;/p&gt;
&lt;p&gt;Of the 55 Items presented, the following were the most relevant to me, someone who was "migrating" to C++ from C:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 2  : Prefer &lt;code&gt;const&lt;/code&gt;s, &lt;code&gt;enum&lt;/code&gt;s and &lt;code&gt;inline&lt;/code&gt;s to &lt;code&gt;#define&lt;/code&gt;s &lt;/li&gt;
&lt;li&gt;Item 5  : Know what functions C++ silently writes and calls&lt;/li&gt;
&lt;li&gt;Item 8  : Prevent exceptions from leaving destructors&lt;/li&gt;
&lt;li&gt;Item 9  : Never call virtual fucntions during construction and destruction&lt;/li&gt;
&lt;li&gt;Item 14 : Think carefully about copying behaviour in resource managing classes&lt;/li&gt;
&lt;li&gt;Item 19 : Treat class design as type design&lt;/li&gt;
&lt;li&gt;Item 26 : Postpone variable definitions&lt;/li&gt;
&lt;li&gt;Item 27 : Minimize Casting&lt;/li&gt;
&lt;li&gt;Item 32 : Make sure public inheritance models "is-a"&lt;/li&gt;
&lt;li&gt;Item 41 : Understand implicit interfaces and compile-time polymorphism&lt;/li&gt;
&lt;li&gt;Item 48 : Be aware of template metaprogramming&lt;/li&gt;
&lt;li&gt;Item 54 : Familiarize yourself with the standard library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The items were relatively independent that I could jump around the book and cover them in this order, having to refer back to other sections and items occasionally. This lent the book being a very easy read, although some of the material presented was a little tricky and I had to try a couple of short programs on my own to really "get" the material.&lt;/p&gt;
&lt;p&gt;Overall, I'd say the book lived up to the excellent reviews and positive feedback from colleagues and I would gladly recommend it to someone in my shoes :). I would definitely consider reading more books from Scott Meyers. viz. : More Effective C++ and Effective STL which I understand are presented in a similar format and cover much of the same material. &lt;/p&gt;</content><category term="programming"></category><category term="cpp"></category><category term="book-review"></category></entry><entry><title>The Hashes</title><link href="/the-hashes.html" rel="alternate"></link><published>2011-10-08T13:22:00+05:30</published><updated>2011-10-08T13:22:00+05:30</updated><author><name>Bhargav Bhat</name></author><id>tag:None,2011-10-08:/the-hashes.html</id><summary type="html">&lt;p&gt;TIL about the # (Stringizing) and ## (Concatenation) operators of the Pre-processor&lt;/p&gt;</summary><content type="html">&lt;p&gt;I ran into a seemingly straight forward problem earlier this week: treat a particular &lt;code&gt;#define&lt;/code&gt; value as either string or int, depending on the context where it is used. A naive solution to is repeating the &lt;code&gt;#define&lt;/code&gt; twice, once as a string and then as a integer:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define SOME_VALUE_INT 42&lt;/span&gt;
&lt;span class="cp"&gt;#define SOME_VALUE_STR &amp;quot;42&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;... and using the right value depending on the context. Not only is this naive method a violation of DRY, but it is also very crude and inelegant. Having multiple such &lt;code&gt;#define&lt;/code&gt;ed constants are a maintainance disaster waiting to happen. My search for a better way to deal with this lead me to a very relevant &lt;a href="https://stackoverflow.com/questions/2653214/stringification-of-a-macro-value"&gt;question&lt;/a&gt; on SO and down I went the rabbit hole that is the the C Pre-processor. This is a summary of my learning and notes for my future self.&lt;/p&gt;
&lt;h3&gt;The Stringizing Operator : &lt;code&gt;#&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves the problem above rather elegantly, as described the accepted answer to in the SO question above:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define xstr(a) str(a)&lt;/span&gt;
&lt;span class="cp"&gt;#define str(a) #a&lt;/span&gt;

&lt;span class="cp"&gt;#define RECORDS_PER_PAGE 10&lt;/span&gt;

&lt;span class="cp"&gt;#define REQUEST_RECORDS \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot;SELECT Fields FROM Table WHERE Conditions&amp;quot; \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; OFFSET %d * &amp;quot; xstr(RECORDS_PER_PAGE) \&lt;/span&gt;
&lt;span class="cp"&gt;        &amp;quot; LIMIT &amp;quot; xstr(RECORDS_PER_PAGE) &amp;quot;;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;allows the preprocessor to replace anything prefixed with a &lt;code&gt;#&lt;/code&gt; with the literal text of the actual argument. The argument is not macro-expanded.&lt;/li&gt;
&lt;li&gt;leading &amp;amp; trailing whitespace is ignored. Whitespaces in the middle of the text converted to a single space&lt;/li&gt;
&lt;li&gt;to stringize the result of expansion of a macro argument, you have to use two levels of macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Stringizing.html#Stringizing"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Concatenation Operator : &lt;code&gt;##&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This operator solves a somewhate related problem of merging or combining two macro values into a single string. The &lt;code&gt;##&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;performs token pasting : two tokens on either side of ‘##’ operator are combined into a single token. The the actual arguments are not macro-expanded.&lt;/li&gt;
&lt;li&gt;cannot create a comment by concatenating ‘/’ and ‘*’.&lt;/li&gt;
&lt;li&gt;comments in arguments that will be concatenated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Source&lt;/em&gt; : GCC &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html#Concatenation"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While these operators present interesting possibilities, using them for all but the most basic and straight forward needs would be difficult. Although handy in a few situations, they are qutie limited and come with a bunch of caveats. However, there still are a few corner cases where they do make lives of programmers a lot simpler.&lt;/p&gt;</content><category term="programming"></category><category term="c"></category><category term="preprocessor"></category><category term="til"></category></entry></feed>